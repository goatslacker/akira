(function () {
    var Identifier, ast;
    Identifier = require('ast/Identifier');
    ast = function (val, context) {
        return function () {
            switch (false) {
            case !(typeof val === 'undefined' || val === null):
                return null;
            case !(Object.prototype.toString.call(val) === '[object String]'):
                return Identifier(val);
            case !(Object.prototype.toString.call(val) === '[object Function]'):
                return val(context);
            case !val.compile:
                return val.compile(context);
            default:
                return val;
            }
        }.apply(this, arguments);
    };
    ast.gen = function (context) {
        return function () {
            return ast(arguments[0], context);
        };
    };
    ast.node = function (name, f) {
        f.akiraFn = name;
        return f;
    };
    module.exports = ast;
}());
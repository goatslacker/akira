(function () {
    var convertToProperty, ObjectExpression;
    var map = function (f, vec) {
        return Array.prototype.map.call(vec, function () {
            return f(arguments[0]);
        });
    };
    var _$tg = require('tg');
    convertToProperty = function (prop) {
        _$tg([Array], [prop]);
        var _$v, key, value;
        _$v = prop;
        key = _$v[0];
        value = _$v[1];
        return _$tg(Object, {
            type: 'Property',
            key: key,
            value: value,
            kind: 'init'
        });
    };
    ObjectExpression = function (props) {
        _$tg([Array], [props]);
        return _$tg(Object, {
            type: 'ObjectExpression',
            properties: map(convertToProperty, props)
        });
    };
    module.exports = ObjectExpression;
}());
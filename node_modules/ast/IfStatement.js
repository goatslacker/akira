// Generated by Akira v0.0.1
(function () {
  var makeArray, makeBlock, ConditionalExpression, IfStatement;
  var _$tg = require('tg').tg;
  makeArray = require('makeArray');
  makeBlock = function (expr) {
    return {
      type: 'BlockStatement',
      body: makeArray(expr)
    };
  };
  ConditionalExpression = function (test, consequent, alternate) {
    return {
      type: 'ConditionalExpression',
      test: test,
      consequent: consequent,
      alternate: alternate
    };
  };
  IfStatement = function (test, consequent, alternate) {
    _$tg([
      Object,
      _$tg.Or(Array, Object),
      _$tg.Or(_$tg.Maybe(Array), _$tg.Maybe(Object))
    ], [
      test,
      consequent,
      alternate
    ]);
    return _$tg(Object, function () {
      return function () {
        switch (false) {
        case !(Object.prototype.toString.call(consequent) === '[object Object]' && Object.prototype.toString.call(alternate) === '[object Object]'):
          return ConditionalExpression(test, consequent, alternate);
        default:
          return {
            type: 'IfStatement',
            test: test,
            consequent: makeBlock(consequent),
            alternate: alternate ? makeBlock(alternate) : null
          };
        }
      }.apply(this, arguments);
    }.apply(this, arguments));
  };
  module.exports = IfStatement;
}());
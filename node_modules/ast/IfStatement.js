(function () {
    var makeArray, makeBlock, ConditionalExpression, IfStatement;
    var _$tg = require('tg');
    makeArray = require('makeArray');
    makeBlock = function (expr) {
        return {
            type: 'BlockStatement',
            body: makeArray(expr)
        };
    };
    ConditionalExpression = function (test, consequent, alternate) {
        return {
            type: 'ConditionalExpression',
            test: test,
            consequent: consequent,
            alternate: alternate
        };
    };
    IfStatement = function (test, consequent, alternate) {
        _$tg([
            Object,
            _$tg.Or(Array, Object),
            _$tg.Or(_$tg.Maybe(Array), _$tg.Maybe(Object))
        ], [
            test,
            consequent,
            alternate
        ]);
        return _$tg(Object, function () {
            switch (false) {
            case !(Object.prototype.toString.call(consequent) === '[object Object]' && Object.prototype.toString.call(alternate) === '[object Object]'):
                return _$tg(Object, ConditionalExpression(test, consequent, alternate));
            default:
                return _$tg(Object, {
                    type: 'IfStatement',
                    test: test,
                    consequent: makeBlock(consequent),
                    alternate: alternate === null ? null : makeBlock(alternate)
                });
            }
        }());
    };
    module.exports = IfStatement;
}());
// Generated by Akira v0.0.1
(function () {
  var ChainedMemberExpression;
  var foldl = function (f, vec, a) {
    var reduce, reducer;
    reduce = Array.prototype.reduce;
    reducer = function () {
      return f(arguments[0], arguments[1]);
    };
    return function () {
      if (vec.length === 0) {
        return [];
      } else {
        return typeof a === 'undefined' ? reduce.call(vec, reducer) : reduce.call(vec, reducer, a);
      }
    }.apply(this, arguments);
  };
  ChainedMemberExpression = function (args) {
    args = Array.prototype.slice.call(arguments, 0, arguments.length - 0);
    return foldl(function (a, b) {
      return {
        type: 'MemberExpression',
        computed: false,
        object: a,
        property: b
      };
    }, args);
  };
  module.exports = ChainedMemberExpression;
}());
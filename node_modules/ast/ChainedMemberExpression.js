(function () {
    var ChainedMemberExpression;
    var foldl = function (f, vec, a) {
        switch (false) {
        case !(arguments.length === 2):
            return vec.length === 0 ? [] : Array.prototype.reduce.call(vec, function () {
                return f(arguments[0], arguments[1]);
            });
        case !(arguments.length === 3):
            return vec.length === 0 ? [] : Array.prototype.reduce.call([a].concat(vec), function () {
                return f(arguments[0], arguments[1]);
            });
        }
    };
    ChainedMemberExpression = function (args) {
        args = Array.prototype.slice.call(arguments, 0, arguments.length - 0);
        return foldl(function (a, b) {
            return {
                type: 'MemberExpression',
                computed: false,
                object: a,
                property: b
            };
        }, args);
    };
    module.exports = ChainedMemberExpression;
}());
module.exports = (function () {
    var ChainedMemberExpression;
    var foldl = function (f, vec) {
        return function () {
            if (vec.length === 0) {
                return [];
            } else {
                return Array.prototype.reduce.call(vec, function (a, b) {
                    return f(a, b);
                });
            }
        }();
    };
    ChainedMemberExpression = function (args) {
        args = Array.prototype.slice.call(arguments, 0, arguments.length - 0);
        return foldl(function (a, b) {
            return {
                type: 'MemberExpression',
                computed: false,
                object: a,
                property: b
            };
        }, args);
    };
    return ChainedMemberExpression;
}());
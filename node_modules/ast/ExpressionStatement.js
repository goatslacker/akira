module.exports = (function () {
    var convertToExpressionStatement, ExpressionStatement;
    convertToExpressionStatement = function (expr, _$p1) {
        switch (false) {
        case !(_$p1 === 'ExpressionStatement' && arguments.length === 2):
            return expr;
        case !(_$p1 === 'TryStatement' && arguments.length === 2):
            return expr;
        case !(_$p1 === 'IfStatement' && arguments.length === 2):
            return expr;
        case !(_$p1 === 'SwitchStatement' && arguments.length === 2):
            return expr;
        case !(_$p1 === 'ForInStatement' && arguments.length === 2):
            return expr;
        case !(_$p1 === 'ReturnStatement' && arguments.length === 2):
            return expr;
        case !(_$p1 === 'BlockStatement' && arguments.length === 2):
            return expr;
        case !(_$p1 === 'ThrowStatement' && arguments.length === 2):
            return expr;
        case !(_$p1 === 'VariableDeclaration' && arguments.length === 2):
            return expr;
        default:
            return {
                type: 'ExpressionStatement',
                expression: expr
            };
        }
    };
    ExpressionStatement = function (expr) {
        return function () {
            if (Object.prototype.toString.call(expr) === '[object Array]') {
                return expr;
            } else {
                return convertToExpressionStatement(expr, expr.type);
            }
        }();
    };
    return ExpressionStatement;
}());
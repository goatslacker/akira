// Generated by Akira v0.0.1
(function () {
  var convertToExpressionStatement, ExpressionStatement;
  var _$tg = require('tg').tg;
  convertToExpressionStatement = function (expr, _$p1) {
    switch (false) {
    case !(_$p1 === 'ExpressionStatement' && arguments.length === 2):
      return expr;
    case !(_$p1 === 'TryStatement' && arguments.length === 2):
      return expr;
    case !(_$p1 === 'IfStatement' && arguments.length === 2):
      return expr;
    case !(_$p1 === 'SwitchStatement' && arguments.length === 2):
      return expr;
    case !(_$p1 === 'ForInStatement' && arguments.length === 2):
      return expr;
    case !(_$p1 === 'ReturnStatement' && arguments.length === 2):
      return expr;
    case !(_$p1 === 'BlockStatement' && arguments.length === 2):
      return expr;
    case !(_$p1 === 'ThrowStatement' && arguments.length === 2):
      return expr;
    case !(_$p1 === 'VariableDeclaration' && arguments.length === 2):
      return expr;
    default:
      return {
        type: 'ExpressionStatement',
        expression: expr
      };
    }
  };
  ExpressionStatement = function (expr) {
    _$tg([_$tg.Or(Object, Array)], [expr]);
    return _$tg(_$tg.Or(Object, Array), function () {
      return Object.prototype.toString.call(expr) === '[object Array]' ? expr : convertToExpressionStatement(expr, expr.type);
    }.apply(this, arguments));
  };
  return module.exports = ExpressionStatement;
}());
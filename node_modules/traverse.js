var concatMap = require('concatMap');

function traverse(object, fn, parent, type, scope) {
  var o = {};
  scope = scope || {};

  if (typeof object !== 'object') {
    return object;
  }

  Object.keys(object).forEach(function (key) {
    var child = object[key];

    var type = Object.prototype.toString.call(child);

    if (parent) {
      switch (parent.type) {
      case 'AssignmentExpression':
        if (parent.left.type === 'Identifier') {
          scope[parent.left.name] = parent.left;
        }
        break;
      case 'FunctionExpression':
        scope = Object.create(scope);
        parent.params.forEach(function (param) {
          scope[param.name] = param;
        });
        break;
      }
    }

    switch (type) {
    case '[object Object]':
      o[key] = traverse(child, fn, object, key, scope);
      break;
    case '[object Array]':
      o[key] = concatMap(function (el) {
        return traverse(el, fn, el, key, scope);
      }, child);
      break;
    default:
      o[key] = child;
    }
  });

  return fn(o, parent, type, scope);
}

module.exports = traverse;

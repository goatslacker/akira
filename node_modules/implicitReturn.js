function implicitReturn(body, f) {
  var ret = body[body.length - 1];
  ret = ret.type === 'ExpressionStatement' ? ret.expression : ret;

  switch (ret.type) {
  case 'ThrowStatement':
  case 'ForInStatement':
  case 'ReturnStatement':
    return;
  }

  if (Array.isArray(ret)) {
    implicitReturn(ret, f)
  } else if (ret.type === 'TryStatement') {
    implicitReturn(ret.block.body, f);
    implicitReturn(ret.handlers[0].body.body, f);
    return;
  } else if (ret.type === 'SwitchStatement') {
    if (ret.__cond === true) {
      ret.cases.forEach(function (x) {
        implicitReturn(x.consequent, f);
      });
    } else {
      return;
    }
  } else if (ret.type === 'IfStatement') {
    implicitReturn(ret.consequent.body, f);
    ret.alternate && implicitReturn(ret.alternate.body, f);
  } else {
    body[body.length - 1] = {
      type: 'ReturnStatement',
      argument: f ? f(ret) : ret
    };
  }
}

module.exports = implicitReturn;

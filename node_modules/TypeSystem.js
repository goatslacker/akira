var Store = require('Store');

function getType(obj) {
  var type = typeof obj;
  if (type === 'object') {
    switch (Object.prototype.toString.call(obj)) {
      case '[object Array]': return 'array';
      case '[object RegExp]': return 'regexp';
      case '[object Null]': return 'null';
      case '[object Date]': return 'date';
      default: return 'object';
    }
  } else {
    return type;
  }
}

function MemberExprArr(object, property, expected, context, line) {
  if (object.type === 'ArrayExpression' && property.type === 'Literal') {
    checkType(
      object.elements[property.value],
      expected,
      context,
      line
    );
  }
}
function MemberExprObj(object, property, expected, context, line) {
  var val = property.value || property.name;
  if (object.type === 'ObjectExpression') {
    object.properties.forEach(function (property) {
      if (property.key.name === val) {
        checkType(property.value, expected, context, line);
      }
    });
  }
}

function checkType(item, expected, context, line) {
  function error(typesig) {
    var value = typesig ||
      (item.type === 'Literal' ? getType(item.value) : item.type);

    if (expected.toLowerCase() === 'any' ||
        value.toLowerCase() === 'any' || value === expected) {
      return;
    }

    throw new TypeError('Expected ' + expected + ' and instead got ' +
      value + ' at ' + context.$$$filename + ' line ' + line);
  }

  switch (item.type) {
    // TODO need a context chain to lookup the proper var value...
    //
    // a = '2'
    // fn [x] 3 + a
    // will safely compile
    case 'Identifier':
      if (context[item.name]) {
        checkType(context[item.name], expected, context, line);
      }
      break;
    case 'Literal':
      error();
      break;
    case 'CallExpression':
      if (item.callee.type === 'Identifier' && Store.types[item.callee.name]) {
        if (Store.types[item.callee.name].retval.name.toLowerCase() !==
            expected) {
          error(Store.types[item.callee.name].retval.name);
        }
      }
      break;
    case 'MemberExpression':
      if (item.object.type === 'Identifier' && context[item.object.name]) {
        MemberExprObj(
          context[item.object.name],
          item.property,
          expected,
          context,
          line
        );
        MemberExprArr(
          context[item.object.name],
          item.property,
          expected,
          context,
          line
        );
      } else {
        MemberExprObj(item.object, item.property, expected, context, line);
        MemberExprArr(item.object, item.property, expected, context, line);
      }
      break;
    case 'ArrayExpression':
      error('vector');
      break;
    case 'ObjectExpression':
      error('map');
      break;
    case 'FunctionExpression':
      error('function');
      break;
    default:
      error();
  }
};

module.exports = {
  getType: getType,
  checkType: checkType
};

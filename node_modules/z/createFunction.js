var AssignmentExpression = require('ast/AssignmentExpression');
var BinaryExpression = require('ast/BinaryExpression');
var CallExpression = require('ast/CallExpression');
var ChainedMemberExpression = require('ast/ChainedMemberExpression');
var FunctionExpression = require('ast/FunctionExpression');
var Identifier = require('ast/Identifier');
var Literal = require('ast/Literal');
var MemberExpression = require('ast/MemberExpression');
var addScope = require('z/addScope');
var ast = require('ast');
var destructure = require('z/destructure');
var implicitReturn = require('z/implicitReturn');
var traverse = require('z/traverse');
var TypeSystem = require('TypeSystem')

var handleParams = require('z/handleParams')

function createFunction(params, body, context, id) {
  if (!Array.isArray(body)) {
    body = [body];
  }

  var functionReturnType = null

  implicitReturn(body, function (node) {
    functionReturnType = TypeSystem.infer(node, context)
    return node
  });

  var recur = false;
  var last = traverse(body[body.length - 1], function (node) {
    if (!node.__recur) {
      return node;
    }

    if (!params) {
      throw new TypeError(
        'Tried to use recur somewhere without any parameters');
    }

    recur = true;

    return node.body.concat(node.body.map(function (arg, idx) {
      var param = params[idx++];

      if (Array.isArray(param)) {
        param = param[0].expression.left;
      }

      return {
        type: 'ExpressionStatement',
        expression: AssignmentExpression(param, arg.declarations[0].id)
      };
    }), { type: 'ContinueStatement', label: null });
  });

  if (recur) {
    body[body.length - 1] = last;
    body = [{
      type: 'WhileStatement',
      test: Literal(true),
      body: {
        type: 'BlockStatement',
        body: body
      }
    }];
  }

  var x = handleParams(params, context)
  var expressions = x.expressions
  params = x.params
  context = x.context
  body = expressions.concat(body);

  body = addScope(context, body);

  var fexpr = FunctionExpression(
    id || null,
    params || [],
    body
  );
  fexpr.__type = functionReturnType
  return fexpr
}

module.exports = createFunction;

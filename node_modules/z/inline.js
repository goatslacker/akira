var ast = require('ast');

function inline(params, id, context) {
  var keys = [
    'operators',
    'compare'
  ];

  if (params.params && params.params.args[0] === 'it') {
    var property = keys.filter(function (k) {
      return !!params.body[k];
    }).pop();

    if (typeof params.body == 'function') {
      return null
    }

    if (property) {
      params.body[property][0] = id;
    // XXX this kind of sniffing is crap
    } else if (params.body.id === 'it') {
      params.body.id = id;
    } else if (params.body.ref.id === 'it') {
      params.body.ref.id = id;
    }

    return ast(params.body, context);
  }

  // TODO what to do here?
  return null;

/*
  return ast(params, context);

  return {
    type: 'CallExpression',
    callee: {
      type: 'MemberExpression',
      computed: false,
      object: Base.compileValue(params, context),
      property: { type: 'Identifier', name: 'apply' }
    },
    arguments: [
      { type: 'Identifier', name: 'this' },
      { type: 'Identifier', name: 'arguments' }
    ]
  };
*/
}

// XXX move to use inline.x which does post-processing
inline.x = function (node) {
  return node
}

module.exports = inline;

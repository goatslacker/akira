module.exports = handleParams

var ast = require('ast')
var destructure = require('z/destructure')
var BinaryExpression = require('ast/BinaryExpression')
var IfStatement = require('ast/IfStatement')
var AssignmentExpression = require('ast/AssignmentExpression')
var ChainedMemberExpression = require('ast/ChainedMemberExpression')
var MemberExpression = require('ast/MemberExpression')
var CallExpression = require('ast/CallExpression')
var Identifier = require('ast/Identifier')
var Literal = require('ast/Literal')
var ExpressionStatement = require('ast/ExpressionStatement')

var void0 = {
  type: 'UnaryExpression',
  operator: 'void',
  argument: Literal(0)
}

var slice = ChainedMemberExpression(
  Identifier('Array'),
  Identifier('prototype'),
  Identifier('slice'),
  Identifier('call')
)

function handleParams(params, context) {
  var expressions = []
  var tmpvar = '_$fp'
  var tmpds = '_$ds'

  params = params || []

  params = params.map(function (param, pi, ls) {

    // Assignments inside params
    if (Array.isArray(param)) {
      var actualParam = param[0].expression.left
      // FIXME don't mutate
      delete context[actualParam.name]

      expressions.push(
        IfStatement(
          BinaryExpression('===', actualParam, void0),
          param[0],
          null
        )
      )

      return actualParam

    // this expressions inside params
    } else if (param.type === 'MemberExpression' && param.object.type === 'Identifier' && param.object.name === 'this') {
      expressions.push(ExpressionStatement(AssignmentExpression(
        param,
        param.property
      )))
      return param.property

    // underscore tmp vars inside params
    } else if (param.type === 'Identifier' && param.name === '_') {
      return Identifier(tmpvar + pi)

    // destructuring of arrays or objects
    } else if (param.type === 'ArrayExpression' || param.type === 'ObjectExpression') {
      expressions.push.apply(
        expressions,
        destructure(
          Identifier(tmpds + pi),
          param,
          0,
          function () { },
          context
        )
      )

      return Identifier(tmpds + pi)

    // rest args
    } else if (param.__rest) {
      expressions.push({
        type: 'ExpressionStatement',
        expression: AssignmentExpression(
          param,
          CallExpression(
            slice,
            [
              Identifier('arguments'),
              Literal(pi),
              BinaryExpression(
                '-',
                MemberExpression(
                  Identifier('arguments'),
                  Identifier('length')
                ),
                Literal(ls.length - pi - 1)
              )
            ]
          )
        )
      })
    }

    return param
  });

  return {
    params: params,
    expressions: expressions,
    context: context
  }
}

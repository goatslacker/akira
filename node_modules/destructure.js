var AssignmentExpression = require('ast/AssignmentExpression');
var BinaryExpression = require('ast/BinaryExpression');
var CallExpression = require('ast/CallExpression');
var Identifier = require('ast/Identifier');
var Literal = require('ast/Literal');
var MemberExpression = require('ast/MemberExpression');
var fu = require('fu')

function destructure(arg, dataStructure, idx, fn, context) {
  var tmpvar = '_$ds' + idx;

  var elements;
  var rest = false;

  switch (dataStructure.type) {
  case 'ArrayExpression':
    elements = dataStructure.elements;
    break;
  case 'ObjectExpression':
    elements = dataStructure.properties;
    break;
  }

  var index = -1
  return fu.concatMap(function (node) {
    index++
    var action;

    if (context[node.name]) {
      return fn(node.name);
    }

// FIXME clean this up
    if (node.type !== 'Identifier' &&
      node.type !== 'ArrayExpression' &&
      node.type !== 'ObjectExpression' &&
      node.type !== 'Property') {
      return null;
    }

    if (node.type === 'ArrayExpression') {
      return destructure(
        MemberExpression(arg, Literal(index), true),
        node,
        idx + 1,
        fn,
        context
      );
    }
    if (node.type === 'ObjectExpression') {
      return destructure(
        MemberExpression(arg, Literal(index), true),
        node,
        idx + 1,
        fn,
        context
      );
    }
    if (node.type === 'Property' && node.value.type === 'ObjectExpression') {
      return destructure(
        MemberExpression(arg, node.key),
        node.value,
        idx + 1,
        fn,
        context
      );
    }

    if (node.name === '_') {
      node.name = tmpvar + index;
    }

    if (node.__rest) {
      rest = true;
      action = CallExpression(
        MemberExpression(arg, Identifier('slice')),
        [
          Literal(index),
          BinaryExpression(
            '-',
            MemberExpression(arg, Identifier('length')),
            Literal(elements.length - index - 1)
          )
        ]
      );
    // FIXME this is ugly
    // we should move this whole destructuring business out to it's own
    // file
    } else if (node.type === 'Property') {
      action = MemberExpression(
        arg,
        node.value.type === 'Identifier' ? node.value : node.key
      )
      node = node.key;
    } else {

      if (rest) {
        action = MemberExpression(
          arg,
          BinaryExpression(
            '-',
            MemberExpression(arg, Identifier('length')),
            Literal(elements.length - index)
          ),
          true
        );
      } else {
        action = MemberExpression(arg, Literal(index), true);
      }
    }

    return context[node.name] = {
      type: 'ExpressionStatement',
      expression: AssignmentExpression(node, action)
    };
  }, elements).filter(function (x) {
    return x !== null;
  });
}

module.exports = destructure;

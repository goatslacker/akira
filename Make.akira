escodegen = require 'escodegen'
esmangle = require 'esmangle'
esprima = require 'esprima'
fs = require 'fs'
path = require 'path'
akira = require (path.join process.env.PWD 'lib/akira/index.js')

mangle = fn [data]
  let
    ast = esprima.parse data
    optimized = esmangle.optimize ast none
    result = esmangle.mangle optimized
    compressed = escodegen.generate result {
      @format {
        @renumber true @hexadecimal true @escapeless true
        @compact true @semicolons false @parentheses false
      }
    }
  then compressed

newline = fn [] { '' }

time = fn [f] {
  start = Date.now!
  f!
  end = Date.now!
  print 'Time {{end - start}}ms'
}

test-results = match {
  [true name len] (print 'âˆš {{name}} {{len}}') || true
  [false name len] (print 'x {{name}}') && false
}

test-file = fn [name] {
  assertions = []
  ok = fn [a b] assertions.push a == b
  ok-deep = fn [a b] {
    zip-with (==) a b | foldl (&&) | ok true
  }

  akira.run ('test/' ++ name) { @ok @ok-deep }

  test-results (foldl (&&) assertions),
    (name.replace '.akira' ''),
    assertions.length
}

test = fn [] {
  time fn [] {
    print 'Running tests...'
    results = fs.readdir-sync 'test' | map test-file | foldl (&&)

    print ''

    if results == true
      then print 'OK!'
      else print 'Fail'
  }
}

create-compile = fn [name from to] {
  fn [] {
    print 'Building {{name}}'
    akira.compile from to
    print 'Done.'
  }
}

create-compile-mangle = fn [name from to] {
  fn [] {
    print 'Building and Minifying {{name}}'
    akira.compile from to mangle
    print 'Done.'
  }
}

build = fn [] {
  create-compile 'parser' 'src/lang' 'lib/lang' | time
}

build-core = fn [] {
  create-compile-mangle 'core' 'src/core/core.akira' 'lib/core' | time
}

build-akira = fn [] {
  create-compile 'akira' 'src/akira/index.akira' 'lib/akira' | time
}

build-ast = fn [] {
  create-compile 'ast' 'src/ast' 'node_modules/ast' | time
}

build-all = fn [] {
  let tasks = [
    build
    build-core
    build-ast
    build-akira
    build
    test
  ]
  then (-> map fn [f] { f! | newline | print } tasks) | time
}

export {
  @test
  @build
  @build-all
  @build-core
  @build-akira
  @build-ast
}

export Makefile-Functions

escodegen = require 'escodegen'
esmangle = require 'esmangle'
esprima = require 'esprima'
path = require 'path'
obj2str = require 'obj2str'

akira = require (path.join process.env.PWD 'lib/akira/index.js')

mangle = fn [data] {
  ast = esprima.parse data
  optimized = esmangle.optimize ast none
  result = esmangle.mangle optimized
  compressed = escodegen.generate result {
    @format {
      @renumber true @hexadecimal true @escapeless true
      @compact true @semicolons false @parentheses false
    }
  }
  compressed
}

transform-core-fns = fn [code core] {
  name = core.key.name
  ast = core.value | obj2str
  code ++ '{{name}}: {{ast}},'
}

gen-compile-core-ast = fn [from target] {
  fn [name ast] {
    ret = last ast.body.0.expression.callee.body.body
    obj-lit = ret.argument.properties
    meat = foldl transform-core-fns obj-lit ''
    code = mangle 'module.exports = { {{meat}} }'
    akira.write name code from target
  }
}

build-parser = fn [] {
  time fn [] {
    print 'Building parser'
    grammar = require (path.join process.env.PWD 'lib/lang/grammar.js')
    name = from = 'lib/lang/parser.js'
    code = grammar.generate!
    target = path.join process.env.PWD 'lib/lang/'
    do akira.write name code from target
      then (-> 'Done building parser.')
      catch print
  }
}

build-core = fn [] {
  fn [] {
    print 'Building and Minifying core'
    from = 'src/core/core.akira'
    target = 'lib/core'
    compile-core-ast = gen-compile-core-ast from target
    do akira.ast from compile-core-ast
      then (-> 'Done building core.')
      catch print
  } | time
}

test = fn [] {
  time fn [] {
    print 'Running tests...'
    do akira.test! then fn [results] {
      test-results = foldl fn [bool result] {
        [name value len] = result
        val-ascii = if value is true then 'âˆš' else 'x'
        print val-ascii ++ ' {{name}} {{len}} assertions.'
        bool && value
      } results

      if test-results == true
        then 'Tests OK!'
        else 'Tests Fail'
    } catch print
  }
}

fs = require: 'fs'
path = require: 'path'
akira = require: (path.join: process.env.PWD 'lib/akira/index.js')

z-str = fn [] ''

time = fn [f] {
  start = Date.now!
  f!
  end = Date.now!
  print: 'Time {{end - start}}ms'
}

test-results = fn
  [true name len] (print: 'âˆš {{name}} {{len}}') || true
  [false name len] (print: 'x {{name}}') && false

test-file = fn [name] {
  assertions = []
  ok  = fn [a b] assertions.push: a == b
  ok-deep = fn [a b]
    zip-with: (==) a b | foldl: (&&) | ok: true

  akira.run: ('test/' ++ name) { @ok @ok-deep }

  test-results: (foldl: (&&) assertions),
    (name.replace: '.akira' ''),
    assertions.length
}

test = fn []
  time: (fn [] {
    print: 'Running tests...'
    results = fs.readdir-sync: 'test' | map: test-file | foldl: (&&)

    print: ''

    if results == true
      then print: 'OK!'
      else print: 'Fail'
  })

build = fn []
  time: (fn [] {
    print: 'Building parser...'
    akira.compile: 'src/lang' 'lib/lang'
    print: 'Built.'
  })

build-core = fn []
  time: (fn [] {
    print: 'Building core...'
    akira.compile: 'src/core/core.akira' 'lib/core'
    print: 'Done.'
  })

build-akira = fn []
  time: (fn [] {
    print: 'Building akira...'
    akira.compile: 'src/akira/index.akira' 'lib/akira'
    print: 'Done.'
  })

build-ast = fn []
  time: (fn [] {
    print: 'Building JS ast...'
    akira.compile: 'src/ast' 'node_modules/ast'
    print: 'Done.'
  })

build-all = fn []
  [build build-core build-ast build-akira build test] |
    map: (fn [f] f! | z-str | print)

export {
  @test
  @build
  @build-all
  @build-core
  @build-akira
}

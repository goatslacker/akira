--Promise = require 'bluebird'

escodegen = require 'escodegen'
esmangle = require 'esmangle'
esprima = require 'esprima'
path = require 'path'
obj2str = require 'obj2str'

akira = require (path.join process.env.PWD 'lib/akira/index.js')

mangle = fn [data] {
  ast = esprima.parse data
  optimized = esmangle.optimize ast none
  result = esmangle.mangle optimized
  compressed = escodegen.generate result {
    @format {
      @renumber true @hexadecimal true @escapeless true
      @compact true @semicolons false @parentheses false
    }
  }
  compressed
}

transform-core-fns = fn [code core] {
  name = core.key.name
  ast = core.value | obj2str
  code ++ '{{name}}: {{ast}},'
}

gen-compile-core-ast = fn [from target] {
  fn [name ast] {
    ret = last ast.body.0.expression.callee.body.body
    obj-lit = ret.argument.properties
    meat = foldl transform-core-fns obj-lit ''
    code = mangle 'module.exports = { {{meat}} }'
    akira.write name code from target
  }
}

time = fn [f] {
  start = Date.now!
  do (f!) fn [str] {
    end = Date.now!
    print str ++ ' Time {{end - start}}ms'
  }
}

start-compile = fn [name from to] {
  fn [] {
    print 'Building {{name}}'
    do (akira.compile from to) -> 'Done building {{name}}.'
  }
}

build = fn [] {
  start-compile 'parser' 'src/lang' 'lib/lang' | time
}

build-ast = fn [] {
  start-compile 'ast' 'src/ast' 'node_modules/ast' | time
}

build-akira = fn [] {
  start-compile 'akira' 'src/akira/index.akira' 'lib/akira' | time
}

build-core = fn [] {
  fn [] {
    print 'Building and Minifying core'
    from = 'src/core/core.akira'
    target = 'lib/core'
    compile-core-ast = gen-compile-core-ast from target
    do (akira.ast from compile-core-ast) -> 'Done building core.'
  } | time
}

test = fn [] {
  time fn [] {
    print 'Running tests...'
    do (akira.test!) fn [results] {
      test-results = foldl fn [bool result] {
        [name value len] = result
        val-ascii = if value is true then 'âˆš' else 'x'
        print val-ascii ++ ' {{name}} {{len}} assertions.'
        bool && value
      } results

      if test-results == true
        then 'Tests OK!'
        else 'Tests Fail'
    }
  }
}

build-all-async = async [] {
  tasks = [
    build
    build-core
    build-ast
    build-akira
    test
  ]
  await map tasks fn [f] { f! }
}

build-all = fn [] {
  (-> do (build-all-async!) -> 'All done.') | time
}

export {
  @test
  @build
  @build-all
  @build-core
  @build-akira
  @build-ast
}

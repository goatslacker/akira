head(a) -> at: a, 1
init(a) -> filterNeq: (last: a), a
tail(a) -> filterNeq: (head: a), a
last(a) -> at: a, (length: a)
flip(f, a, b) -> f: b, a
consts(a, b) -> a
square(x) -> x * x
partial(fn, arg) -> (\args -> fn: arg, args)
eq(a, b) -> a == b
neq(a, b) -> a != b
assert(bool) -> if bool == true then print: 'Ok.' else print: 'Fail.'
arrEq(a, b) -> eq: 0, (length: (filter: (\x, i -> neq: x, (at: b, i)), a))
arrNeq(a, b) -> arrEq: a, b | invertBool
filterNeq(n, a) -> filter: (\x -> neq: n, x), a
invertBool(a) -> a == false
sum() -> foldl: (\a, b -> a + b), arguments
prod() -> foldl: (\a, b -> a * b), arguments

// Generated by Akira v0.0.1
!function() {
function map(f,a){if(arguments.length==1)return function(a){return map(f,a);};var i=0,l=a.length,r=Array(l);for(i;i<l;i+=1)r[i]=f(a[i]);return r;}
var Literal, ObjectExpression, ast, TypeSystem, Map;
Literal = require('ast/Literal');
ObjectExpression = require('ast/ObjectExpression');
ast = require('ast');
TypeSystem = require('TypeSystem');
Map = function () {
  var _$Class;
  _$Class = function (obj) {
    this.obj = obj;
    this.akiraName = 'Map';
  };
  _$Class.prototype.compile = function (context) {
    var getPairs, properties;
    getPairs = function (arg) {
      var key, value;
      key = ast(arg.id, context);
      value = arg.val === null ? context[arg.id.name] ? key : Literal(arg.id.name) : ast(arg.val, context);
      value.__type = TypeSystem.infer(value, context);
      return [
        key,
        value
      ];
    };
    properties = this.obj ? map(getPairs, this.obj.args) : [];
    return ObjectExpression(properties);
  };
  return _$Class;
}.apply(this, arguments);
return module.exports = Map;
}();
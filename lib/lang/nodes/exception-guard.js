// Generated by Akira v0.0.1
!function() {

var Identifier, ExpressionStatement, ast, makeArray, makeBlock, ExceptionGuard;
Identifier = require('ast/Identifier');
ExpressionStatement = require('ast/ExpressionStatement');
ast = require('ast');
makeArray = require('z/makeArray');
makeBlock = function (expr) {
  return {
    type: 'BlockStatement',
    body: makeArray(expr)
  };
};
ExceptionGuard = function () {
  var _$Class;
  _$Class = function (tr, id, ca) {
    this.tr = tr;
    this.id = id;
    this.ca = ca;
    this;
  };
  _$Class.prototype.compile = function (context) {
    return {
      type: 'TryStatement',
      block: makeBlock(ExpressionStatement(ast(this.tr, context))),
      handlers: [{
          type: 'CatchClause',
          param: ast(this.id, context),
          guard: null,
          body: makeBlock(ExpressionStatement(ast(this.ca, context)))
        }],
      finalizer: null
    };
  };
  return _$Class;
}.apply(this, arguments);
return module.exports = ExceptionGuard;
}();
// Generated by Akira v0.0.1
!function() {

var Identifier, ast, getIdentifier, getCoreFunction, Logic;
Identifier = require('ast/Identifier');
ast = require('ast');
getIdentifier = function (_$p0) {
  switch (false) {
  case !(_$p0 === '&&' && arguments.length === 1):
    return 'and';
  case !(_$p0 === '||' && arguments.length === 1):
    return 'or';
  default:
    throw new Error('Invalid operation');
  }
};
getCoreFunction = function (op) {
  var node;
  node = Identifier(getIdentifier(op));
  node.__core = true;
  return node;
};
Logic = function () {
  var _$Class;
  _$Class = function (a, op, b, sugar) {
    this.compare = [
      a,
      b
    ];
    this.operation = op;
    this.sugar = sugar;
  };
  _$Class.prototype.compile = function (context) {
    return function () {
      if (this.sugar) {
        return getCoreFunction(this.operation);
      } else {
        return {
          type: 'LogicalExpression',
          operator: this.operation,
          left: ast(this.compare[0], context),
          right: ast(this.compare[1], context)
        };
      }
    }.apply(this, arguments);
  };
  return _$Class;
}.apply(this, arguments);
return module.exports = Logic;
}();
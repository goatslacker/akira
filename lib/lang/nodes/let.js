// Generated by Akira v0.0.1
(function () {
  var ExpressionStatement, ast, betaRedex, implicitReturn, getScope, Let;
  var foldl = function (f, vec, a) {
    switch (false) {
    case !(arguments.length === 2):
      return vec.length === 0 ? [] : Array.prototype.reduce.call(vec, function () {
        return f(arguments[0], arguments[1]);
      });
    case !(arguments.length === 3):
      return vec.length === 0 ? [] : Array.prototype.reduce.call([a].concat(vec), function () {
        return f(arguments[0], arguments[1]);
      });
    }
  };
  ExpressionStatement = require('ast/ExpressionStatement');
  ast = require('ast');
  betaRedex = require('betaRedex');
  implicitReturn = require('implicitReturn');
  getScope = require('getScope');
  Let = function () {
    var _$Class;
    _$Class = function (body, ret) {
      this.body = body.args.slice(0);
      this.ret = ret;
    };
    _$Class.prototype.compile = function (context) {
      var scope, nodes, ret, body;
      scope = getScope(context, []);
      nodes = this.body.reverse();
      ret = ast(this.ret, scope);
      body = foldl(function (nodes, node) {
        var expr;
        expr = ExpressionStatement(ast(node, scope));
        return [expr].concat(nodes);
      }, [ret].concat(nodes));
      implicitReturn(body);
      return betaRedex(body, scope);
    };
    return _$Class;
  }.apply(this, arguments);
  module.exports = Let;
}());
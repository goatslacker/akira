// Generated by Akira v0.0.1
!function() {
function foldl(f,a,s){if(arguments.length==1)return function(a,s){return foldl(f,a,s);};var i=0,l=a.length,v;if(s===undefined){if(!l)throw new Error(emptyList);v=a[i++];}else{v=s;}for(i;i<l;i+=1)v=f(v,a[i]);return v;}
var ExpressionStatement, ast, betaRedex, implicitReturn, getScope, Let;
ExpressionStatement = require('ast/ExpressionStatement');
ast = require('ast');
betaRedex = require('z/betaRedex');
implicitReturn = require('z/implicitReturn');
getScope = require('z/getScope');
Let = function () {
  var _$Class;
  _$Class = function (body, ret) {
    this.body = body.args.slice(0);
    this.ret = ret;
  };
  _$Class.prototype.compile = function (context) {
    var scope, nodes, ret, body;
    scope = getScope(context, []);
    nodes = this.body.reverse();
    ret = ast(this.ret, scope);
    body = foldl(function (nodes, node) {
      var expr;
      expr = ExpressionStatement(ast(node, scope));
      return [expr].concat(nodes);
    }, [ret].concat(nodes));
    implicitReturn(body);
    return betaRedex(body, scope);
  };
  return _$Class;
}.apply(this, arguments);
return module.exports = Let;
}();
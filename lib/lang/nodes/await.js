// Generated by Akira v0.0.1
(function () {
  var ast, CallExpression, FunctionExpression, Identifier, MemberExpression, xthen, Promise, supportedAsyncFns, xchangeIfAsyncCaller, Await;
  var any = function (f, vec) {
    return Array.prototype.some.call(vec, function () {
      return f(arguments[0]);
    });
  };
  ast = require('ast');
  CallExpression = require('ast/CallExpression');
  FunctionExpression = require('ast/FunctionExpression');
  Identifier = require('ast/Identifier');
  MemberExpression = require('ast/MemberExpression');
  xthen = Identifier('then');
  Promise = Identifier('Promise');
  supportedAsyncFns = [
    'map',
    'filter'
  ];
  xchangeIfAsyncCaller = function (call) {
    var name, xform;
    name = call.callee.name;
    xform = any(function () {
      return arguments[0] === name;
    }, supportedAsyncFns);
    return xform === true ? CallExpression(MemberExpression(Promise, call.callee), call.arguments) : call;
  };
  Await = function () {
    var _$Class;
    _$Class = function (call) {
      this.call = call;
      this;
    };
    _$Class.prototype.compile = function (context) {
      var call, callback, caller, node;
      call = ast(this.call, context);
      callback = FunctionExpression(null, [], []);
      caller = call.callee.type === 'Identifier' ? xchangeIfAsyncCaller(call) : call;
      node = CallExpression(MemberExpression(caller, xthen), [callback]);
      node.__await = true;
      return node;
    };
    return _$Class;
  }.apply(this, arguments);
  module.exports = Await;
}());
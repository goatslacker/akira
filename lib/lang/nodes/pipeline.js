// Generated by Akira v0.0.1
(function () {
  var CallExpression, ast, inline, pushLastCall, Pipeline;
  CallExpression = require('ast/CallExpression');
  ast = require('ast');
  inline = require('inline');
  pushLastCall = function (node) {
    return node.callee.type === 'CallExpression' ? CallExpression(node.callee.callee, node.callee.arguments.concat(node.arguments)) : node;
  };
  Pipeline = function () {
    var _$Class;
    _$Class = function (ref, params) {
      this.ref = ref;
      this.params = params;
      this;
    };
    _$Class.prototype.compile = function (context) {
      var inlined, callee, args;
      inlined = inline(this.params, this.ref, context);
      return function () {
        if (inlined) {
          return inlined;
        } else {
          callee = ast(this.params, context);
          args = ast(this.ref, context);
          return inline.x(pushLastCall(CallExpression(callee, [args])));
        }
      }.apply(this, arguments);
    };
    return _$Class;
  }.apply(this, arguments);
  module.exports = Pipeline;
}());
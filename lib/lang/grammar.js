// Generated by Akira v0.0.1
!function() {

var jison, unwrap, getMatch, o, startSymbol, bnf, tokens, operators;
jison = require('jison');
unwrap = /^function\s*\(\)\s*\{\s*return\s*([\s\S]*)\s*\}/;
getMatch = function (action) {
  var x;
  x = unwrap.exec(action);
  return x ? x[1] : '(' + (action) + '())';
};
o = function (pattern, action) {
  var patternString, xaction;
  patternString = pattern.replace(/\s{2,}/g, ' ');
  return function () {
    if (!action) {
      return [
        patternString,
        '$$ = $1'
      ];
    } else {
      xaction = getMatch(action);
      return [
        patternString,
        '$$ = ' + (xaction) + ''
      ];
    }
  }.apply(this, arguments);
};
startSymbol = 'Root';
bnf = {
  Root: [
    [
      '',
      'return $$ = new yy.Nodes;'
    ],
    [
      'Program',
      'return $$ = $1'
    ]
  ],
  Program: [
    o('Terminator Statements', function (it) {
      return $2;
    }),
    o('Terminator', function (it) {
      return null;
    }),
    o('Statements')
  ],
  Statements: [
    o('Statement', function () {
      return yy.Nodes.wrap($1);
    }),
    o('Statements TERMINATOR Statement', function () {
      return $1.push($3);
    }),
    o('Statements ; Body', function () {
      return $1.push($3);
    }),
    o('Statements TERMINATOR')
  ],
  Expressions: [
    o('Expression', function () {
      return yy.Nodes.wrap($1);
    }),
    o('Expressions TERMINATOR Expression', function () {
      return $1.push($3);
    }),
    o('Expressions ; Body', function () {
      return $1.push($3);
    }),
    o('Expressions TERMINATOR')
  ],
  Terminator: [
    o('TERMINATOR'),
    o('Terminator TERMINATOR')
  ],
  OptTerminator: [
    o(''),
    o('Terminator')
  ],
  OptComma: [
    o(''),
    o(',')
  ],
  BodyOrExpression: [
    o('Body OptTerminator'),
    o('Expression Terminator')
  ],
  Identifier: [o('IDENTIFIER', function () {
      return yy.L(yylineno, new yy.Identifier($1));
    })],
  Prototype: [o('PROTOTYPE', function () {
      return yy.L(yylineno, new yy.Identifier('__prototype'));
    })],
  Rest: [o('& IDENTIFIER', function () {
      return yy.L(yylineno, new yy.Identifier($2, true));
    })],
  Body: [o('Indent Expressions DEDENT', function () {
      return $2;
    })],
  Indent: [o('Terminator INDENT OptTerminator')],
  Dedent: [o('OptTerminator DEDENT')],
  Statement: [
    o('Exporting'),
    o('Expression'),
    o('DefMacro'),
    o('TypeSignature'),
    o('TypeAlias'),
    o('Interface')
  ],
  Expression: [
    o('Value'),
    o('If'),
    o('Assignment'),
    o('PatternMatching'),
    o('Cond'),
    o('Invocation'),
    o('InlineDeclaration'),
    o('AsyncFunction'),
    o('AsyncDo'),
    o('Awaitable'),
    o('Let'),
    o('Pipeline'),
    o('Cloning'),
    o('Instantiate'),
    o('Macro'),
    o('Raise'),
    o('Recur'),
    o('Exceptions'),
    o('TypeCheck'),
    o('IMPORT STR', function () {
      return yy.L(yylineno, new yy.Import($2));
    })
  ],
  Value: [
    o('NUM', function () {
      return yy.L(yylineno, new yy.Literal(Number($1.replace(/,/g, ''))));
    }),
    o('NONE', function () {
      return yy.L(yylineno, new yy.Literal(null));
    }),
    o('BOOL', function () {
      return yy.L(yylineno, new yy.Literal($1 === 'true'));
    }),
    o('REGEXP', function () {
      return yy.L(yylineno, new yy.Literal($1));
    }),
    o('Accessibles'),
    o('SpecialFunctions'),
    o('Class'),
    o('Operation'),
    o('Instance'),
    o('This'),
    o('@', function () {
      return yy.L(yylineno, new yy.Identifier('this'));
    }),
    o('( Indent Expression Dedent Terminator )', function () {
      return $3;
    }),
    o('( Expression OptTerminator )', function () {
      return $2;
    })
  ],
  Callables: [
    o('Identifier'),
    o('Declaration'),
    o('Prototype'),
    o('Access')
  ],
  Accessibles: [
    o('Callables'),
    o('Strings'),
    o('Vectors'),
    o('Maps'),
    o('ArgumentsShorthand')
  ],
  TypeCheck: [o('TYPE_OPERATOR Value', function () {
      return yy.L(yylineno, new yy.Operation($2, '::'));
    })],
  ArgumentsShorthand: [o('ARGS', function () {
      return yy.L(yylineno, new yy.Access(yy.L(yylineno, new yy.Identifier('arguments')), yy.L(yylineno, new yy.Literal(Number($1)))));
    })],
  AlphaNumeric: [
    o('NUM', function () {
      return yy.L(yylineno, new yy.Literal(Number($1.replace(/,/g, ''))));
    }),
    o('Strings')
  ],
  Strings: [o('STR', function () {
      return yy.L(yylineno, new yy.Literal(String($1)));
    })],
  Assignment: [
    o('Identifier = Expression', function () {
      return yy.L(yylineno, new yy.Assignment($1, $3));
    }),
    o('Access = Expression', function () {
      return yy.L(yylineno, new yy.Assignment($1, $3));
    }),
    o('Vectors = Expression', function () {
      return yy.L(yylineno, new yy.Assignment($1, $3));
    }),
    o('Maps = Expression', function () {
      return yy.L(yylineno, new yy.Assignment($1, $3));
    }),
    o('AccessOperation = Expression', function () {
      return yy.L(yylineno, new yy.Assignment($1, $3));
    }),
    o('This = Expression', function () {
      return yy.L(yylineno, new yy.Assignment($1, $3));
    })
  ],
  Exporting: [o('EXPORT Identifier', function () {
      return yy.L(yylineno, new yy.Export($2));
    })],
  Cloning: [
    o('Identifier INHERITANCE Arguments', function () {
      return yy.L(yylineno, new yy.Cloning($3, $1));
    }),
    o('Maps Arguments', function () {
      return yy.L(yylineno, new yy.Cloning($2, $1));
    }),
    o('Vectors Arguments', function () {
      return yy.L(yylineno, new yy.Cloning($2, $1));
    })
  ],
  ValuePlusCalls: [
    o('Value'),
    o('Invocation'),
    o('Pipeline')
  ],
  AllCallables: [
    o('Accessibles'),
    o('Invocation'),
    o('SpecialFunctions'),
    o('( InlineDeclaration )', function () {
      return $2;
    })
  ],
  Pipeline: [
    o('Value | OptTerminator AllCallables', function () {
      return yy.L(yylineno, new yy.Pipeline($1, $4));
    }),
    o('Invocation | OptTerminator AllCallables', function () {
      return yy.L(yylineno, new yy.Pipeline($1, $4));
    }),
    o('Pipeline | OptTerminator AllCallables', function () {
      return yy.L(yylineno, new yy.Pipeline($1, $4));
    })
  ],
  Invocation: [
    o('Callables Arguments', function () {
      return yy.L(yylineno, new yy.Call($1, $2));
    }),
    o('| AllCallables', function () {
      return yy.L(yylineno, new yy.Call($2));
    }),
    o('& | AllCallables', function () {
      return yy.L(yylineno, new yy.Call($3, 'apply'));
    })
  ],
  Declaration: [
    o('FN [ Parameters ] Body', function () {
      return yy.L(yylineno, new yy.Declaration(null, $3, $5));
    }),
    o('FN [ ] Body', function () {
      return yy.L(yylineno, new yy.Declaration(null, null, $4));
    }),
    o('LAMBDA Body', function () {
      return yy.L(yylineno, new yy.Declaration(null, null, $2));
    })
  ],
  InlineDeclaration: [
    o('LAMBDA Expression', function () {
      return yy.L(yylineno, new yy.Declaration(null, null, $2));
    }),
    o('FN [ Parameters ] Expression', function () {
      return yy.L(yylineno, new yy.Declaration(null, $3, $5));
    })
  ],
  LetOperation: [o('Identifier = Value', function () {
      return yy.L(yylineno, new yy.Assignment($1, $3));
    })],
  LetOperations: [
    o('LetOperation', function () {
      return yy.L(yylineno, new yy.Arguments($1));
    }),
    o('LetOperations OptTerminator LetOperation', function () {
      return yy.L(yylineno, new yy.Arguments($1, $3));
    })
  ],
  Let: [
    o('LET Indent LetOperations Dedent Terminator THEN Body', function () {
      return yy.L(yylineno, new yy.Let($3, $7));
    }),
    o('LET Indent LetOperations Dedent Terminator THEN Expression', function () {
      return yy.L(yylineno, new yy.Let($3, $7));
    }),
    o('LET LetOperations THEN Body', function () {
      return yy.L(yylineno, new yy.Let($2, $4));
    }),
    o('LET LetOperations THEN Expression', function () {
      return yy.L(yylineno, new yy.Let($2, $4));
    })
  ],
  AsyncFunction: [
    o('ASYNC [ ] Body', function () {
      return yy.L(yylineno, new yy.AsyncFunction(null, $4));
    }),
    o('ASYNC [ Parameters ] Body', function () {
      return yy.L(yylineno, new yy.AsyncFunction($3, $5));
    })
  ],
  MultipleAwaitable: [o('AllCallables TERMINATOR', function () {
      return $1;
    })],
  MultipleAwaitables: [
    o('MultipleAwaitable', function () {
      return yy.L(yylineno, new yy.Arguments($1));
    }),
    o('MultipleAwaitables MultipleAwaitable', function () {
      return yy.L(yylineno, new yy.Arguments($1, $2));
    })
  ],
  AwaitBlock: [o('{ OptTerminator MultipleAwaitables }', function () {
      return $3;
    })],
  Awaitable: [
    o('AWAIT AllCallables', function () {
      return yy.L(yylineno, new yy.Await($2, false));
    }),
    o('AWAIT AwaitBlock', function () {
      return yy.L(yylineno, new yy.Await($2, true));
    })
  ],
  AsyncDo: [
    o('DO ValuePlusCalls THEN AllCallables CATCH AllCallables', function () {
      return yy.L(yylineno, new yy.Do($2, $4, $6));
    }),
    o('DO ValuePlusCalls Indent THEN AllCallables Terminator CATCH AllCallables Dedent', function () {
      return yy.L(yylineno, new yy.Do($2, $5, $8));
    }),
    o('DO ValuePlusCalls Indent AllCallables Terminator DEDENT Terminator CATCH Indent AllCallables Dedent', function () {
      return yy.L(yylineno, new yy.Do($2, $4, $10));
    })
  ],
  Conditional: [o('Value ? BodyOrExpression', function () {
      return [
        $1,
        $3
      ];
    })],
  Conditionals: [
    o('Conditional', function () {
      return yy.L(yylineno, new yy.Arguments($1));
    }),
    o('Conditionals Conditional', function () {
      return yy.L(yylineno, new yy.Arguments($1, $2));
    })
  ],
  CondElse: [
    o('ELSE ? Expression', function () {
      return [
        $1,
        $3
      ];
    }),
    o('ELSE ? Body', function () {
      return [
        $1,
        $3
      ];
    })
  ],
  Cond: [o('COND Indent Conditionals CondElse Dedent', function () {
      return yy.L(yylineno, new yy.Cond($3, $4));
    })],
  Pattern: [
    o('[ ] BodyOrExpression', function () {
      return [
        null,
        $3
      ];
    }),
    o('[ VectorArgs ] BodyOrExpression', function () {
      return [
        $2,
        $4
      ];
    }),
    o('[ ELSE ] BodyOrExpression', function () {
      return [
        $2,
        $4
      ];
    })
  ],
  Patterns: [
    o('Pattern', function () {
      return yy.L(yylineno, new yy.Arguments($1));
    }),
    o('Patterns Pattern', function () {
      return yy.L(yylineno, new yy.Arguments($1, $2));
    })
  ],
  PatternMatching: [o('MATCH Indent Patterns DEDENT', function () {
      return yy.L(yylineno, new yy.Pattern($3));
    })],
  Vectors: [
    o('[ ]', function () {
      return yy.L(yylineno, new yy.Vector());
    }),
    o('[ VectorArgs ]', function () {
      return yy.L(yylineno, new yy.Vector($2));
    }),
    o('[ Indent VectorArgs Dedent Terminator ]', function () {
      return yy.L(yylineno, new yy.Vector($3));
    })
  ],
  VectorArg: [
    o('Value'),
    o('Rest')
  ],
  VectorArgs: [
    o('VectorArg', function () {
      return yy.L(yylineno, new yy.Arguments($1));
    }),
    o('VectorArgs OptTerminator VectorArg', function () {
      return yy.L(yylineno, new yy.Arguments($1, $3));
    })
  ],
  Key: [o('KEY', function () {
      return yy.L(yylineno, new yy.Identifier($1));
    })],
  This: [o('THIS', function () {
      return yy.L(yylineno, new yy.Access(yy.L(yylineno, new yy.Identifier('this')), yy.L(yylineno, new yy.Identifier($1))));
    })],
  KeyValue: [
    o('Key', function () {
      return yy.L(yylineno, new yy.Assignment($1, null));
    }),
    o('Key ValuePlusCalls', function () {
      return yy.L(yylineno, new yy.Assignment($1, $2));
    })
  ],
  MapItems: [
    o('KeyValue', function () {
      return yy.L(yylineno, new yy.Arguments($1));
    }),
    o('MapItems OptTerminator KeyValue', function () {
      return yy.L(yylineno, new yy.Arguments($1, $3));
    })
  ],
  TypeAlias: [o('TYPEALIAS Identifier TypeValue', function () {
      return yy.L(yylineno, new yy.TypeAlias(yy.L(yylineno, new yy.TypeSignature($2, '', $3))));
    })],
  Maps: [
    o('{ }', function () {
      return yy.L(yylineno, new yy.Map());
    }),
    o('{ MapItems }', function () {
      return yy.L(yylineno, new yy.Map($2));
    }),
    o('{ Indent MapItems Dedent Terminator }', function () {
      return yy.L(yylineno, new yy.Map($3));
    })
  ],
  Access: [o('Accessibles Accessor', function () {
      return yy.L(yylineno, new yy.Access($1, $2));
    })],
  Accessor: [
    o('. Identifier', function () {
      return $2;
    }),
    o('. AlphaNumeric', function () {
      return $2;
    }),
    o('. PROTOTYPE', function () {
      return $2;
    })
  ],
  Arguments: [
    o('Value', function () {
      return yy.L(yylineno, new yy.Arguments($1));
    }),
    o('Rest'),
    o('Arguments OptComma Value', function () {
      return yy.L(yylineno, new yy.Arguments($1, $3));
    })
  ],
  Param: [
    o('Identifier'),
    o('( Identifier = Value )', function () {
      return yy.L(yylineno, new yy.Assignment($2, $4));
    }),
    o('Rest'),
    o('This'),
    o('Vectors'),
    o('Maps')
  ],
  Parameters: [
    o('Param', function () {
      return yy.L(yylineno, new yy.Arguments($1));
    }),
    o('Parameters OptComma Param', function () {
      return yy.L(yylineno, new yy.Arguments($1, $3));
    })
  ],
  ClassMember: [
    o('Identifier [ Parameters ] BodyOrExpression', function () {
      return yy.L(yylineno, new yy.ClassMethod($1, $3, $5));
    }),
    o('Identifier [ ] BodyOrExpression', function () {
      return yy.L(yylineno, new yy.ClassMethod($1, null, $4));
    }),
    o('This Value Terminator', function () {
      return [
        $1,
        $2
      ];
    })
  ],
  ClassMembers: [
    o('ClassMember', function () {
      return yy.L(yylineno, new yy.Arguments($1));
    }),
    o('ClassMembers ClassMember', function () {
      return yy.L(yylineno, new yy.Arguments($1, $2));
    })
  ],
  Constructor: [
    o('[ Parameters ] BodyOrExpression', function () {
      return yy.L(yylineno, new yy.ClassMethod(null, $2, $4));
    }),
    o('[ ] BodyOrExpression', function () {
      return yy.L(yylineno, new yy.ClassMethod(null, null, $3));
    })
  ],
  OptImplements: [
    o('', function () {
      return null;
    }),
    o('TYPE_OPERATOR Identifier', function () {
      return $2;
    })
  ],
  OptInherits: [
    o('', function () {
      return null;
    }),
    o('INHERITANCE Identifier', function () {
      return $2;
    })
  ],
  Class: [
    o('CLASS OptInherits OptImplements Indent Constructor DEDENT', function () {
      return yy.L(yylineno, new yy.Class($5, [], $3, $2));
    }),
    o('CLASS OptInherits OptImplements Indent Constructor ClassMembers DEDENT', function () {
      return yy.L(yylineno, new yy.Class($5, $6, $3, $2));
    })
  ],
  KeyType: [o('Key TypeValue', function () {
      return [
        $1,
        $2
      ];
    })],
  InterfaceKeys: [
    o('KeyType', function () {
      return yy.L(yylineno, new yy.Arguments($1));
    }),
    o('InterfaceKeys KeyType', function () {
      return yy.L(yylineno, new yy.Arguments($1, $2));
    })
  ],
  Interface: [o('INTERFACE Identifier { OptTerminator InterfaceKeys OptTerminator }', function () {
      return yy.L(yylineno, new yy.Interface($2, $5));
    })],
  Instantiate: [
    o('NEW Callables Arguments', function () {
      return yy.L(yylineno, new yy.Instantiate(yy.L(yylineno, new yy.Call($2, $3))));
    }),
    o('NEW Callables', function () {
      return yy.L(yylineno, new yy.Instantiate(yy.L(yylineno, new yy.Call($2))));
    })
  ],
  Exceptions: [o('TRY Body Terminator CATCH Identifier Body', function () {
      return yy.L(yylineno, new yy.ExceptionGuard($2, $5, $6));
    })],
  Raise: [o('RAISE Value ErrorType', function () {
      return yy.L(yylineno, new yy.Exception($1, $2, $3));
    })],
  ErrorType: [
    o('', function () {
      return null;
    }),
    o('Identifier')
  ],
  Recur: [o('RECUR Arguments', function () {
      return yy.L(yylineno, new yy.Recur($2));
    })],
  If: [
    o('Value IF ValuePlusCalls', function () {
      return yy.L(yylineno, new yy.If($3, $1, null));
    }),
    o('IF ValuePlusCalls THEN Expression ELSE Expression', function () {
      return yy.L(yylineno, new yy.If($2, $4, $6));
    }),
    o('IF ValuePlusCalls Indent THEN Expression Terminator ELSE Expression Dedent', function () {
      return yy.L(yylineno, new yy.If($2, $5, $8));
    }),
    o('IF ValuePlusCalls Body Terminator ELSE Body', function () {
      return yy.L(yylineno, new yy.If($2, $3, $6));
    })
  ],
  DefMacro: [o('MACRO Identifier Declaration', function () {
      return yy.L(yylineno, new yy.Macro($2, $3));
    })],
  TypeValues: [
    o('Identifier'),
    o('VectorType'),
    o('MapType'),
    o('ASYNC LAMBDA Identifier', function () {
      return yy.L(yylineno, new yy.Type($3, 'async'));
    }),
    o('MAYBE TypeValues', function () {
      return yy.L(yylineno, new yy.Type($2, 'maybe'));
    })
  ],
  TypeValue: [
    o('TypeValues'),
    o('TypeValues | TypeValue', function () {
      return yy.L(yylineno, new yy.Type([
        $1,
        $3
      ], 'or'));
    })
  ],
  VectorType: [o('[ TypeParams ]', function () {
      return yy.L(yylineno, new yy.Type($2, 'vector'));
    })],
  MapType: [o('{ OptTerminator MapTypeParams OptTerminator }', function () {
      return yy.L(yylineno, new yy.Type($3, 'map'));
    })],
  MaybeTypeParams: [
    o(''),
    o('TypeParams')
  ],
  TypeKeyValue: [
    o('Key', function () {
      return yy.L(yylineno, new yy.Assignment($1, null));
    }),
    o('Key TypeValue', function () {
      return yy.L(yylineno, new yy.Assignment($1, $2));
    })
  ],
  MapTypeParams: [
    o('TypeKeyValue', function () {
      return yy.L(yylineno, new yy.Arguments($1));
    }),
    o('MapTypeParams TypeKeyValue', function () {
      return yy.L(yylineno, new yy.Arguments($1, $2));
    })
  ],
  TypeParams: [
    o('TypeValue', function () {
      return yy.L(yylineno, new yy.Arguments($1));
    }),
    o('TypeParams TypeValue', function () {
      return yy.L(yylineno, new yy.Arguments($1, $2));
    })
  ],
  TypeSignature: [o('Identifier TYPE_OPERATOR MaybeTypeParams LAMBDA TypeValue', function () {
      return yy.L(yylineno, new yy.TypeSignature($1, $3, $5));
    })],
  Macro: [
    o('` OptTerminator Statement', function () {
      return yy.L(yylineno, new yy.Evaluate($3));
    }),
    o('~ OptTerminator Statement', function () {
      return yy.L(yylineno, new yy.Evaluate($3, true));
    })
  ],
  Operators: [
    o('+', function () {
      return yy.L(yylineno, new yy.Identifier('sum'));
    }),
    o('-', function () {
      return yy.L(yylineno, new yy.Identifier('sub'));
    }),
    o('*', function () {
      return yy.L(yylineno, new yy.Identifier('prod'));
    }),
    o('* *', function () {
      return yy.L(yylineno, new yy.Identifier('pow'));
    }),
    o('/', function () {
      return yy.L(yylineno, new yy.Identifier('div'));
    }),
    o('COMPARE', function () {
      return yy.L(yylineno, new yy.Compare($1));
    }),
    o('LOGIC', function () {
      return yy.L(yylineno, new yy.Logic(null, $1, null, true));
    })
  ],
  SugaryFunctions: [
    o('Operators', function () {
      return $1;
    }),
    o('Accessor', function () {
      return yy.L(yylineno, new yy.Declaration('->', yy.L(yylineno, new yy.Arguments('it')), yy.L(yylineno, new yy.Access('it', $1))));
    }),
    o('Accessor Arguments', function () {
      return yy.L(yylineno, new yy.Declaration('->', yy.L(yylineno, new yy.Arguments('it')), yy.L(yylineno, new yy.Call(yy.L(yylineno, new yy.Access('it', $1)), $2))));
    }),
    o('COMPARE Value', function () {
      return yy.L(yylineno, new yy.Declaration('->', yy.L(yylineno, new yy.Arguments('it')), yy.L(yylineno, new yy.Compare('it', $1, $2))));
    }),
    o('LOGIC Value', function () {
      return yy.L(yylineno, new yy.Declaration('->', yy.L(yylineno, new yy.Arguments('it')), yy.L(yylineno, new yy.Logic('it', $1, $2))));
    }),
    o('LEFT_OPERATORS Value', function () {
      return yy.L(yylineno, new yy.Declaration('->', yy.L(yylineno, new yy.Arguments('it')), yy.L(yylineno, new yy.Operation('it', $1, $2))));
    }),
    o('ACCESSOR_OPERATOR Value', function () {
      return yy.L(yylineno, new yy.Declaration('->', yy.L(yylineno, new yy.Arguments('it')), yy.L(yylineno, new yy.Operation('it', $1, $2))));
    }),
    o('= Value', function () {
      return yy.L(yylineno, new yy.Declaration('->', yy.L(yylineno, new yy.Arguments('it')), $2));
    }),
    o('+ Value', function () {
      return yy.L(yylineno, new yy.Declaration('->', yy.L(yylineno, new yy.Arguments('it')), yy.L(yylineno, new yy.Operation('it', $1, $2))));
    }),
    o('- Value', function () {
      return yy.L(yylineno, new yy.Declaration('->', yy.L(yylineno, new yy.Arguments('it')), yy.L(yylineno, new yy.Operation('it', $1, $2))));
    }),
    o('* Value', function () {
      return yy.L(yylineno, new yy.Declaration('->', yy.L(yylineno, new yy.Arguments('it')), yy.L(yylineno, new yy.Operation('it', $1, $2))));
    }),
    o('* * Value', function () {
      return yy.L(yylineno, new yy.Declaration('->', yy.L(yylineno, new yy.Arguments('it')), yy.L(yylineno, new yy.Operation('it', '**', $3))));
    }),
    o('/ Value', function () {
      return yy.L(yylineno, new yy.Declaration('->', yy.L(yylineno, new yy.Arguments('it')), yy.L(yylineno, new yy.Operation('it', $1, $2))));
    })
  ],
  SpecialFunctions: [o('( SugaryFunctions )', function () {
      return $2;
    })],
  AccessOperation: [o('Value ACCESSOR_OPERATOR OptTerminator Value', function () {
      return yy.L(yylineno, new yy.Operation($1, $2, $4));
    })],
  Operation: [
    o('Value COMPARE OptTerminator Value', function () {
      return yy.L(yylineno, new yy.Compare($1, $2, $4));
    }),
    o('Value LOGIC OptTerminator Value', function () {
      return yy.L(yylineno, new yy.Logic($1, $2, $4));
    }),
    o('AccessOperation'),
    o('Value LEFT_OPERATORS OptTerminator Value', function () {
      return yy.L(yylineno, new yy.Operation($1, $2, $4));
    }),
    o('Value RIGHT_OPERATORS OptTerminator Value', function () {
      return yy.L(yylineno, new yy.Operation($1, $2, $4));
    }),
    o('Value INSTANCEOF Value', function () {
      return yy.L(yylineno, new yy.Inst($1, $3));
    }),
    o('NOT Value', function () {
      return yy.L(yylineno, new yy.Compare($2, $1));
    }),
    o('Value + OptTerminator Value', function () {
      return yy.L(yylineno, new yy.Operation($1, '+', $4));
    }),
    o('Value - OptTerminator Value', function () {
      return yy.L(yylineno, new yy.Operation($1, '-', $4));
    }),
    o('Value * OptTerminator Value', function () {
      return yy.L(yylineno, new yy.Operation($1, '*', $4));
    }),
    o('Value * * OptTerminator Value', function () {
      return yy.L(yylineno, new yy.Operation($1, '**', $5));
    }),
    o('Value / OptTerminator Value', function () {
      return yy.L(yylineno, new yy.Operation($1, '/', $4));
    })
  ]
};
tokens = [
  'ASSERT',
  'IF',
  'THEN',
  'ELSE',
  'FN',
  'MATCH',
  'KEY',
  'LAMBDA',
  'IDENTIFIER',
  'BOOL',
  'NUM',
  'STR',
  'LOGIC',
  'COMPARE',
  'DO',
  'RETURN',
  'TERMINATOR'
];
operators = [
  [
    'right',
    'NOT'
  ],
  [
    'right',
    'IF',
    'THEN',
    'ELSE',
    'IMPORT',
    'EXPORT'
  ],
  [
    'right',
    '=',
    '|'
  ],
  [
    'right',
    'RIGHT_OPERATORS'
  ],
  [
    'nonassoc',
    '(',
    ')',
    '[',
    ']',
    '{',
    '}',
    ':'
  ],
  [
    'left',
    'LOGIC'
  ],
  [
    'left',
    'COMPARE'
  ],
  [
    'left',
    'INSTANCEOF'
  ],
  [
    'left',
    'LEFT_OPERATORS'
  ],
  [
    'left',
    'ACCESSOR_OPERATOR'
  ],
  [
    'left',
    '+',
    '-'
  ],
  [
    'left',
    '*',
    '**',
    '/'
  ]
];
return module.exports = new jison.Parser({
  tokens: tokens,
  bnf: bnf,
  operators: operators,
  startSymbol: startSymbol
});
}();
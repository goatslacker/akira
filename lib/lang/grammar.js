// Generated by Akira v0.0.1
(function () {
  var jison, unwrap, getMatch, o, startSymbol, bnf, tokens, operators;
  jison = require('jison');
  unwrap = /^function\s*\(\)\s*\{\s*return\s*([\s\S]*)\s*\}/;
  getMatch = function (action) {
    var x;
    x = unwrap.exec(action);
    return x ? x[1] : '(' + (action) + '())';
  };
  o = function (pattern, action) {
    var patternString, xaction;
    patternString = pattern.replace(/\s{2,}/g, ' ');
    return function () {
      if (!action) {
        return [
          patternString,
          '$$ = $1'
        ];
      } else {
        xaction = getMatch(action);
        return [
          patternString,
          '$$ = ' + (xaction) + ''
        ];
      }
    }.apply(this, arguments);
  };
  startSymbol = 'Root';
  bnf = {
    Root: [
      [
        '',
        'return $$ = new yy.Nodes;'
      ],
      [
        'Program',
        'return $$ = $1'
      ]
    ],
    Program: [
      o('Terminator Statements', function (it) {
        return $2;
      }),
      o('Terminator', function (it) {
        return null;
      }),
      o('Statements')
    ],
    Statements: [
      o('Statement', function () {
        return yy.Nodes.wrap($1);
      }),
      o('Statements TERMINATOR Statement', function () {
        return $1.push($3);
      }),
      o('Statements ; Body', function () {
        return $1.push($3);
      }),
      o('Statements TERMINATOR')
    ],
    Expressions: [
      o('Expression', function () {
        return yy.Nodes.wrap($1);
      }),
      o('Expressions TERMINATOR Expression', function () {
        return $1.push($3);
      }),
      o('Expressions ; Body', function () {
        return $1.push($3);
      }),
      o('Expressions TERMINATOR')
    ],
    Terminator: [
      o('TERMINATOR'),
      o('Terminator TERMINATOR')
    ],
    OptTerminator: [
      o(''),
      o('Terminator')
    ],
    Identifier: [o('IDENTIFIER', function () {
        return yy.L(yylineno, new yy.Identifier($1));
      })],
    Prototype: [o('PROTOTYPE', function () {
        return yy.L(yylineno, new yy.Identifier('__prototype'));
      })],
    Rest: [o('& IDENTIFIER', function () {
        return yy.L(yylineno, new yy.Identifier($2, true));
      })],
    TBody: [o('{ OptTerminator Expressions }', function () {
        return $3;
      })],
    Body: [
      o('TBody'),
      o('Expression')
    ],
    Statement: [
      o('Exporting'),
      o('Expression'),
      o('DefMacro'),
      o('TypeSignature'),
      o('TypeAlias'),
      o('Interface')
    ],
    Expression: [
      o('Value'),
      o('If'),
      o('Assignment'),
      o('PatternMatching'),
      o('Cond'),
      o('Invocation'),
      o('InlineDeclaration'),
      o('AsyncFunction'),
      o('AsyncDo'),
      o('Awaitable'),
      o('Let'),
      o('Pipeline'),
      o('Cloning'),
      o('Instantiate'),
      o('Macro'),
      o('Raise'),
      o('Recur'),
      o('Exceptions'),
      o('TypeCheck'),
      o('IMPORT STR', function () {
        return yy.L(yylineno, new yy.Import($2));
      })
    ],
    Value: [
      o('NUM', function () {
        return yy.L(yylineno, new yy.Literal(Number($1.replace(/,/g, ''))));
      }),
      o('NONE', function () {
        return yy.L(yylineno, new yy.Literal(null));
      }),
      o('BOOL', function () {
        return yy.L(yylineno, new yy.Literal($1 === 'true'));
      }),
      o('REGEXP', function () {
        return yy.L(yylineno, new yy.Literal($1));
      }),
      o('Vectors'),
      o('Maps'),
      o('Accessibles'),
      o('SpecialFunctions'),
      o('Class'),
      o('Operation'),
      o('Markup'),
      o('( OptTerminator Expression OptTerminator )', function () {
        return $3;
      })
    ],
    Accessibles: [
      o('Identifier'),
      o('Strings'),
      o('Declaration'),
      o('Prototype'),
      o('ArgumentsShorthand'),
      o('Access')
    ],
    TypeCheck: [o('TYPE_OPERATOR Value', function () {
        return yy.L(yylineno, new yy.Operation($2, '::'));
      })],
    ArgumentsShorthand: [o('ARGS', function () {
        return yy.L(yylineno, new yy.Access(yy.L(yylineno, new yy.Identifier('arguments')), yy.L(yylineno, new yy.Literal(Number($1)))));
      })],
    AlphaNumeric: [
      o('NUM', function () {
        return yy.L(yylineno, new yy.Literal(Number($1.replace(/,/g, ''))));
      }),
      o('Strings')
    ],
    Strings: [o('STR', function () {
        return yy.L(yylineno, new yy.Literal(String($1)));
      })],
    Assignment: [
      o('Identifier = Expression', function () {
        return yy.L(yylineno, new yy.Assignment($1, $3));
      }),
      o('Access = Expression', function () {
        return yy.L(yylineno, new yy.Assignment($1, $3));
      }),
      o('Vectors = Expression', function () {
        return yy.L(yylineno, new yy.Assignment($1, $3));
      }),
      o('Maps = Expression', function () {
        return yy.L(yylineno, new yy.Assignment($1, $3));
      }),
      o('AccessOperation = Expression', function () {
        return yy.L(yylineno, new yy.Assignment($1, $3));
      })
    ],
    Exporting: [o('EXPORT Identifier', function () {
        return yy.L(yylineno, new yy.Export($2));
      })],
    Cloning: [
      o('Identifier INHERITANCE Arguments', function () {
        return yy.L(yylineno, new yy.Cloning($3, $1));
      }),
      o('Maps Arguments', function () {
        return yy.L(yylineno, new yy.Cloning($2, $1));
      }),
      o('Vectors Arguments', function () {
        return yy.L(yylineno, new yy.Cloning($2, $1));
      })
    ],
    ValuePlusCalls: [
      o('Value'),
      o('Invocation')
    ],
    AllCallables: [
      o('Accessibles'),
      o('Invocation'),
      o('SpecialFunctions'),
      o('( OptTerminator InlineDeclaration OptTerminator )', function () {
        return $3;
      })
    ],
    Pipeline: [
      o('Value | OptTerminator AllCallables', function () {
        return yy.L(yylineno, new yy.Pipeline($1, $4));
      }),
      o('Invocation | OptTerminator AllCallables', function () {
        return yy.L(yylineno, new yy.Pipeline($1, $4));
      }),
      o('Pipeline | OptTerminator AllCallables', function () {
        return yy.L(yylineno, new yy.Pipeline($1, $4));
      })
    ],
    Invocation: [
      o('Accessibles Arguments', function () {
        return yy.L(yylineno, new yy.Call($1, $2));
      }),
      o('Accessibles !', function () {
        return yy.L(yylineno, new yy.Call($1));
      }),
      o('Accessibles & !', function () {
        return yy.L(yylineno, new yy.Call($1, 'apply'));
      })
    ],
    Declaration: [
      o('FN [ Parameters ] TBody', function () {
        return yy.L(yylineno, new yy.Declaration(null, $3, $5));
      }),
      o('FN [ ] TBody', function () {
        return yy.L(yylineno, new yy.Declaration(null, null, $4));
      }),
      o('LAMBDA TBody', function () {
        return yy.L(yylineno, new yy.Declaration(null, null, $2));
      })
    ],
    InlineDeclaration: [
      o('FN [ Parameters ] Expression', function () {
        return yy.L(yylineno, new yy.Declaration(null, $3, $5));
      }),
      o('FN [ Parameters ] TERMINATOR Expression', function () {
        return yy.L(yylineno, new yy.Declaration(null, $3, $6));
      }),
      o('FN [ ] Expression', function () {
        return yy.L(yylineno, new yy.Declaration(null, null, $4));
      }),
      o('LAMBDA Expression', function () {
        return yy.L(yylineno, new yy.Declaration(null, null, $2));
      })
    ],
    Markup: [o(': Identifier Value Value', function () {
        return yy.L(yylineno, new yy.Markup($2, $3, $4));
      })],
    LetOperation: [o('Identifier Value', function () {
        return yy.L(yylineno, new yy.Assignment($1, $2));
      })],
    LetOperations: [
      o('LetOperation', function () {
        return yy.L(yylineno, new yy.Arguments($1));
      }),
      o('LetOperations OptComma LetOperation', function () {
        return yy.L(yylineno, new yy.Arguments($1, $3));
      })
    ],
    Let: [o('LET [ OptTerminator LetOperations OptTerminator ] THEN Body', function () {
        return yy.L(yylineno, new yy.Let($4, $8));
      })],
    MaybeParameters: [
      o('Value', function () {
        return yy.L(yylineno, new yy.Arguments($1));
      }),
      o('MaybeParameters OptComma Value', function () {
        return yy.L(yylineno, new yy.Arguments($1, $3));
      })
    ],
    AsyncFunction: [
      o('ASYNC [ ] Body', function () {
        return yy.L(yylineno, new yy.AsyncFunction(null, $4));
      }),
      o('ASYNC [ Parameters ] Body', function () {
        return yy.L(yylineno, new yy.AsyncFunction($3, $5));
      })
    ],
    MultipleAwaitable: [o('AllCallables TERMINATOR', function () {
        return $1;
      })],
    MultipleAwaitables: [
      o('MultipleAwaitable', function () {
        return yy.L(yylineno, new yy.Arguments($1));
      }),
      o('MultipleAwaitables MultipleAwaitable', function () {
        return yy.L(yylineno, new yy.Arguments($1, $2));
      })
    ],
    AwaitBlock: [o('{ OptTerminator MultipleAwaitables }', function () {
        return $3;
      })],
    Awaitable: [
      o('AWAIT AllCallables', function () {
        return yy.L(yylineno, new yy.Await($2, false));
      }),
      o('AWAIT AwaitBlock', function () {
        return yy.L(yylineno, new yy.Await($2, true));
      })
    ],
    AsyncDo: [o('DO ValuePlusCalls OptTerminator THEN AllCallables OptTerminator CATCH AllCallables', function () {
        return yy.L(yylineno, new yy.Do($2, $5, $8));
      })],
    Conditional: [o('Value ? Body Terminator', function () {
        return [
          $1,
          $3
        ];
      })],
    Conditionals: [
      o('Conditional', function () {
        return yy.L(yylineno, new yy.Arguments($1));
      }),
      o('Conditionals Conditional', function () {
        return yy.L(yylineno, new yy.Arguments($1, $2));
      })
    ],
    CondElse: [o('ELSE ? Body', function () {
        return [
          $1,
          $3
        ];
      })],
    Cond: [o('COND TERMINATOR Conditionals CondElse', function () {
        return yy.L(yylineno, new yy.Cond($3, $4));
      })],
    Pattern: [
      o('[ ] Body TERMINATOR', function () {
        return [
          null,
          $3
        ];
      }),
      o('[ VectorArgs ] Body TERMINATOR', function () {
        return [
          $2,
          $4
        ];
      }),
      o('[ ELSE ] Body TERMINATOR', function () {
        return [
          $2,
          $4
        ];
      })
    ],
    Patterns: [
      o('Pattern', function () {
        return yy.L(yylineno, new yy.Arguments($1));
      }),
      o('Patterns Pattern', function () {
        return yy.L(yylineno, new yy.Arguments($1, $2));
      })
    ],
    PatternMatching: [o('MATCH { OptTerminator Patterns }', function () {
        return yy.L(yylineno, new yy.Pattern($4));
      })],
    Comma: [
      o(''),
      o(', OptTerminator')
    ],
    Vectors: [
      o('[ ]', function () {
        return yy.L(yylineno, new yy.Vector());
      }),
      o('[ OptTerminator VectorArgs OptTerminator ]', function () {
        return yy.L(yylineno, new yy.Vector($3));
      })
    ],
    VectorArg: [
      o('Value'),
      o('Rest')
    ],
    VectorArgs: [
      o('VectorArg', function () {
        return yy.L(yylineno, new yy.Arguments($1));
      }),
      o('VectorArgs OptComma VectorArg', function () {
        return yy.L(yylineno, new yy.Arguments($1, $3));
      })
    ],
    Key: [o('KEY', function () {
        return yy.L(yylineno, new yy.Identifier($1));
      })],
    KeyValue: [
      o('Key', function () {
        return yy.L(yylineno, new yy.Assignment($1, null));
      }),
      o('Key Value', function () {
        return yy.L(yylineno, new yy.Assignment($1, $2));
      })
    ],
    MapItems: [
      o('KeyValue', function () {
        return yy.L(yylineno, new yy.Arguments($1));
      }),
      o('MapItems OptComma KeyValue', function () {
        return yy.L(yylineno, new yy.Arguments($1, $3));
      })
    ],
    TypeAlias: [o('TYPEALIAS Identifier TypeValue', function () {
        return yy.L(yylineno, new yy.TypeAlias(yy.L(yylineno, new yy.TypeSignature($2, '', $3))));
      })],
    Maps: [
      o('{ }', function () {
        return yy.L(yylineno, new yy.Map());
      }),
      o('{ OptTerminator MapItems OptTerminator }', function () {
        return yy.L(yylineno, new yy.Map($3));
      })
    ],
    Access: [o('Accessibles Accessor', function () {
        return yy.L(yylineno, new yy.Access($1, $2));
      })],
    Accessor: [
      o('. Identifier', function () {
        return $2;
      }),
      o('. AlphaNumeric', function () {
        return $2;
      }),
      o('. PROTOTYPE', function () {
        return $2;
      })
    ],
    Arguments: [
      o('Value', function () {
        return yy.L(yylineno, new yy.Arguments($1));
      }),
      o('Rest'),
      o('Arguments Comma Value', function () {
        return yy.L(yylineno, new yy.Arguments($1, $3));
      })
    ],
    Param: [
      o('Identifier'),
      o('( Identifier = Value )', function () {
        return yy.L(yylineno, new yy.Assignment($2, $4));
      }),
      o('Rest'),
      o('Key'),
      o('Vectors')
    ],
    OptComma: [
      o(', OptTerminator'),
      o('OptTerminator')
    ],
    Parameters: [
      o('Param', function () {
        return yy.L(yylineno, new yy.Arguments($1));
      }),
      o('Parameters OptComma Param', function () {
        return yy.L(yylineno, new yy.Arguments($1, $3));
      })
    ],
    ClassMember: [
      o('Identifier [ Parameters ] Body', function () {
        return yy.L(yylineno, new yy.ClassMethod($1, $3, $5));
      }),
      o('Identifier [ ] Body', function () {
        return yy.L(yylineno, new yy.ClassMethod($1, null, $4));
      }),
      o('Key Value', function () {
        return [
          $1,
          $2
        ];
      })
    ],
    ClassMembers: [
      o('ClassMember', function () {
        return yy.L(yylineno, new yy.Arguments($1));
      }),
      o('ClassMembers Terminator ClassMember', function () {
        return yy.L(yylineno, new yy.Arguments($1, $3));
      })
    ],
    Constructor: [
      o('[ Parameters ] Body', function () {
        return yy.L(yylineno, new yy.ClassMethod(null, $2, $4));
      }),
      o('[ ] Body', function () {
        return yy.L(yylineno, new yy.ClassMethod(null, null, $3));
      })
    ],
    OptImplements: [
      o('', function () {
        return null;
      }),
      o('TYPE_OPERATOR Identifier', function () {
        return $2;
      })
    ],
    OptInherits: [
      o('', function () {
        return null;
      }),
      o('INHERITANCE Identifier', function () {
        return $2;
      })
    ],
    Class: [
      o('CLASS OptInherits OptImplements { Terminator Constructor Terminator }', function () {
        return yy.L(yylineno, new yy.Class($6, [], $3, $2));
      }),
      o('CLASS OptInherits OptImplements { Terminator Constructor Terminator ClassMembers Terminator }', function () {
        return yy.L(yylineno, new yy.Class($6, $8, $3, $2));
      })
    ],
    KeyType: [o('Key TypeValue', function () {
        return [
          $1,
          $2
        ];
      })],
    InterfaceKeys: [
      o('KeyType', function () {
        return yy.L(yylineno, new yy.Arguments($1));
      }),
      o('InterfaceKeys OptComma KeyType', function () {
        return yy.L(yylineno, new yy.Arguments($1, $3));
      })
    ],
    Interface: [o('INTERFACE Identifier { OptTerminator InterfaceKeys OptTerminator }', function () {
        return yy.L(yylineno, new yy.Interface($2, $5));
      })],
    Instantiate: [o('NEW Invocation', function () {
        return yy.L(yylineno, new yy.Instantiate($2));
      })],
    Exceptions: [o('TRY Body OptTerminator CATCH Identifier Body', function () {
        return yy.L(yylineno, new yy.ExceptionGuard($2, $5, $6));
      })],
    Raise: [o('RAISE Value ErrorType', function () {
        return yy.L(yylineno, new yy.Exception($1, $2, $3));
      })],
    ErrorType: [
      o('', function () {
        return null;
      }),
      o('Identifier')
    ],
    Recur: [o('RECUR OptTerminator Arguments', function () {
        return yy.L(yylineno, new yy.Recur($3));
      })],
    If: [
      o('Value IF ValuePlusCalls', function () {
        return yy.L(yylineno, new yy.If($3, $1, null));
      }),
      o('IF ValuePlusCalls OptTerminator THEN Body OptTerminator ELSE Body', function () {
        return yy.L(yylineno, new yy.If($2, $5, $8));
      })
    ],
    DefMacro: [o('MACRO Identifier Declaration', function () {
        return yy.L(yylineno, new yy.Macro($2, $3));
      })],
    TypeValues: [
      o('Identifier'),
      o('VectorType'),
      o('MapType'),
      o('ASYNC LAMBDA Identifier', function () {
        return yy.L(yylineno, new yy.Type($3, 'async'));
      }),
      o('MAYBE TypeValues', function () {
        return yy.L(yylineno, new yy.Type($2, 'maybe'));
      })
    ],
    TypeValue: [
      o('TypeValues'),
      o('TypeValues | TypeValue', function () {
        return yy.L(yylineno, new yy.Type([
          $1,
          $3
        ], 'or'));
      })
    ],
    VectorType: [o('[ TypeParams ]', function () {
        return yy.L(yylineno, new yy.Type($2, 'vector'));
      })],
    MapType: [o('{ OptTerminator MapTypeParams OptTerminator }', function () {
        return yy.L(yylineno, new yy.Type($3, 'map'));
      })],
    MaybeTypeParams: [
      o(''),
      o('TypeParams')
    ],
    TypeKeyValue: [
      o('Key', function () {
        return yy.L(yylineno, new yy.Assignment($1, null));
      }),
      o('Key TypeValue', function () {
        return yy.L(yylineno, new yy.Assignment($1, $2));
      })
    ],
    MapTypeParams: [
      o('TypeKeyValue', function () {
        return yy.L(yylineno, new yy.Arguments($1));
      }),
      o('MapTypeParams TypeKeyValue', function () {
        return yy.L(yylineno, new yy.Arguments($1, $2));
      })
    ],
    TypeParams: [
      o('TypeValue', function () {
        return yy.L(yylineno, new yy.Arguments($1));
      }),
      o('TypeParams TypeValue', function () {
        return yy.L(yylineno, new yy.Arguments($1, $2));
      })
    ],
    TypeSignature: [o('Identifier TYPE_OPERATOR MaybeTypeParams LAMBDA TypeValue', function () {
        return yy.L(yylineno, new yy.TypeSignature($1, $3, $5));
      })],
    Macro: [
      o('` OptTerminator Statement', function () {
        return yy.L(yylineno, new yy.Evaluate($3));
      }),
      o('~ OptTerminator Statement', function () {
        return yy.L(yylineno, new yy.Evaluate($3, true));
      })
    ],
    Operators: [
      o('+', function () {
        return yy.L(yylineno, new yy.Identifier('sum'));
      }),
      o('-', function () {
        return yy.L(yylineno, new yy.Identifier('sub'));
      }),
      o('*', function () {
        return yy.L(yylineno, new yy.Identifier('prod'));
      }),
      o('* *', function () {
        return yy.L(yylineno, new yy.Identifier('pow'));
      }),
      o('/', function () {
        return yy.L(yylineno, new yy.Identifier('div'));
      }),
      o('COMPARE', function () {
        return yy.L(yylineno, new yy.Compare($1));
      }),
      o('LOGIC', function () {
        return yy.L(yylineno, new yy.Logic(null, $1, null, true));
      })
    ],
    SugaryFunctions: [
      o('Operators', function () {
        return $1;
      }),
      o('Accessor', function () {
        return yy.L(yylineno, new yy.Declaration('->', yy.L(yylineno, new yy.Arguments('it')), yy.L(yylineno, new yy.Access('it', $1))));
      }),
      o('Accessor Arguments', function () {
        return yy.L(yylineno, new yy.Declaration('->', yy.L(yylineno, new yy.Arguments('it')), yy.L(yylineno, new yy.Call(yy.L(yylineno, new yy.Access('it', $1)), $2))));
      }),
      o('COMPARE Value', function () {
        return yy.L(yylineno, new yy.Declaration('->', yy.L(yylineno, new yy.Arguments('it')), yy.L(yylineno, new yy.Compare('it', $1, $2))));
      }),
      o('LOGIC Value', function () {
        return yy.L(yylineno, new yy.Declaration('->', yy.L(yylineno, new yy.Arguments('it')), yy.L(yylineno, new yy.Logic('it', $1, $2))));
      }),
      o('LEFT_OPERATORS Value', function () {
        return yy.L(yylineno, new yy.Declaration('->', yy.L(yylineno, new yy.Arguments('it')), yy.L(yylineno, new yy.Operation('it', $1, $2))));
      }),
      o('ACCESSOR_OPERATOR Value', function () {
        return yy.L(yylineno, new yy.Declaration('->', yy.L(yylineno, new yy.Arguments('it')), yy.L(yylineno, new yy.Operation('it', $1, $2))));
      }),
      o('= Value', function () {
        return yy.L(yylineno, new yy.Declaration('->', yy.L(yylineno, new yy.Arguments('it')), $2));
      }),
      o('+ Value', function () {
        return yy.L(yylineno, new yy.Declaration('->', yy.L(yylineno, new yy.Arguments('it')), yy.L(yylineno, new yy.Operation('it', $1, $2))));
      }),
      o('- Value', function () {
        return yy.L(yylineno, new yy.Declaration('->', yy.L(yylineno, new yy.Arguments('it')), yy.L(yylineno, new yy.Operation('it', $1, $2))));
      }),
      o('* Value', function () {
        return yy.L(yylineno, new yy.Declaration('->', yy.L(yylineno, new yy.Arguments('it')), yy.L(yylineno, new yy.Operation('it', $1, $2))));
      }),
      o('* * Value', function () {
        return yy.L(yylineno, new yy.Declaration('->', yy.L(yylineno, new yy.Arguments('it')), yy.L(yylineno, new yy.Operation('it', '**', $3))));
      }),
      o('/ Value', function () {
        return yy.L(yylineno, new yy.Declaration('->', yy.L(yylineno, new yy.Arguments('it')), yy.L(yylineno, new yy.Operation('it', $1, $2))));
      })
    ],
    SpecialFunctions: [o('( SugaryFunctions )', function () {
        return $2;
      })],
    AccessOperation: [o('Value ACCESSOR_OPERATOR OptTerminator Value', function () {
        return yy.L(yylineno, new yy.Operation($1, $2, $4));
      })],
    Operation: [
      o('Value COMPARE OptTerminator Value', function () {
        return yy.L(yylineno, new yy.Compare($1, $2, $4));
      }),
      o('Value LOGIC OptTerminator Value', function () {
        return yy.L(yylineno, new yy.Logic($1, $2, $4));
      }),
      o('AccessOperation'),
      o('Value LEFT_OPERATORS OptTerminator Value', function () {
        return yy.L(yylineno, new yy.Operation($1, $2, $4));
      }),
      o('Value RIGHT_OPERATORS OptTerminator Value', function () {
        return yy.L(yylineno, new yy.Operation($1, $2, $4));
      }),
      o('NOT Value', function () {
        return yy.L(yylineno, new yy.Compare($2, $1));
      }),
      o('Value + OptTerminator Value', function () {
        return yy.L(yylineno, new yy.Operation($1, '+', $4));
      }),
      o('Value - OptTerminator Value', function () {
        return yy.L(yylineno, new yy.Operation($1, '-', $4));
      }),
      o('Value * OptTerminator Value', function () {
        return yy.L(yylineno, new yy.Operation($1, '*', $4));
      }),
      o('Value * * OptTerminator Value', function () {
        return yy.L(yylineno, new yy.Operation($1, '**', $5));
      }),
      o('Value / OptTerminator Value', function () {
        return yy.L(yylineno, new yy.Operation($1, '/', $4));
      })
    ]
  };
  tokens = [
    'ASSERT',
    'IF',
    'THEN',
    'ELSE',
    'FN',
    'MATCH',
    'KEY',
    'LAMBDA',
    'IDENTIFIER',
    'BOOL',
    'NUM',
    'STR',
    'LOGIC',
    'COMPARE',
    'DO',
    'RETURN',
    'TERMINATOR'
  ];
  operators = [
    [
      'right',
      'NOT'
    ],
    [
      'right',
      'IF',
      'THEN',
      'ELSE',
      'IMPORT',
      'EXPORT'
    ],
    [
      'right',
      '=',
      '|'
    ],
    [
      'right',
      'RIGHT_OPERATORS'
    ],
    [
      'nonassoc',
      '(',
      ')',
      '[',
      ']',
      '{',
      '}',
      ':'
    ],
    [
      'left',
      'LOGIC'
    ],
    [
      'left',
      'COMPARE'
    ],
    [
      'left',
      'LEFT_OPERATORS'
    ],
    [
      'left',
      'ACCESSOR_OPERATOR'
    ],
    [
      'left',
      '+',
      '-'
    ],
    [
      'left',
      '*',
      '**',
      '/'
    ]
  ];
  return module.exports = new jison.Parser({
    tokens: tokens,
    bnf: bnf,
    operators: operators,
    startSymbol: startSymbol
  });
}());
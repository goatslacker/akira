# Runtime tests for Memory

start = Date.now:!

print-failures() -> (
  print: 'FAIL ' ++ assert.failures.length ++ ' tests'
  print: assert.failures
)

# import test
import 'test/assignments.mem'
import 'test/exceptions.mem'
import 'test/if.mem'
import 'test/invocations.mem'
import 'test/list.mem'
import 'test/patterns.mem'
import 'test/regexp.mem'
import 'test/reserved.mem'
import 'test/strings.mem'
import 'test/tuples.mem'
import 'test/utils.mem'
import 'test/exporting.mem'
import 'test/operators.mem'

assert: my-k, 3
assert: my-a, 2
my-id: 5 | assert: @, 5

# export fact test
assert: 24, (fact: 4)

# sum and prod
assert: 2, (sum: 1, 1)
assert: 4, (prod: 2, 2)

-> (
  b = 'hello-world'
  c = b.replace: /-([a-z])/g, (\i -> i.2.toUpperCase:!)
  assert: c, 'helloWorld'
)


# Done.
end = Date.now:!

print: 'Done!'

if assert.successes
  then print: 'OK ' ++ assert.successes.length ++ ' tests'
  else none

if assert.failures.length
  then print-failures:!
  else none

print: 'Time ' ++ end - start ++ 'ms'

numbers = fn [n]
  'one' ? 1
  'two' ? 2
  'three' ? 3
  else ? 4

assert: 4, (numbers: 'four')
assert: 1, (numbers: 'one')

gtTen = fn [n]
  n < 10 ? true
  n > 10 ? false
  else ? none

assert: false, (gtTen: 11)
assert: true, (gtTen: 2)

starts-with = fn [noun, prefix] prefix == noun.1 + noun.2

spanish-gender-of-noun = fn [noun]
  (starts-with: noun, 'el') ? 'male'
  (starts-with: noun, 'la') ? 'female'
  else ? none

assert: 'female', (spanish-gender-of-noun: 'la casa')
assert: 'male', (spanish-gender-of-noun: 'el carro')

sort-even-odd = fn [[x, & xs]]
  not x ? []
  else ? {
    if (odd: x)
      then (sort-even-odd: xs) ++ [x]
      else x +: (sort-even-odd: xs)
  }

[1,2,3,4,5,6] | sort-even-odd | assert-deep: [2, 4, 6, 5, 3, 1]

-- implementations of our util functions in memory
init = fn [[& a, b]] a
tail = fn [[a, & b]] b
head = fn [[a, & b]] a
last = fn [[& a, b]] b
get-middle = fn [[a, & b, c]] b


ls = [1, 2, 3, 4, 5]

ls | get-middle | assert-deep: [2, 3, 4]
ls | init | assert-deep: [1, 2, 3, 4]
ls | tail | assert-deep: [2, 3, 4, 5]
ls | head | assert: 1
ls | last | assert: 5

add-two = fn [(n = 0)]
  n is 0 ? 0
  else ? n + 2

add-two: 0 | assert: 0
add-two: 2 | assert: 4

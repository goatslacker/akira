numbers(n)
  'one' -> 1
  'two' -> 2
  'three' -> 3
  n -> 4

eq: 4, (numbers: 'four') | assert
eq: 1, (numbers: 'one') | assert

gtTen(n)
  n < 10 -> true
  n > 10 -> false

eq: false, (gtTen: 11) | assert
eq: true, (gtTen: 2) | assert

starts-with(noun, prefix) -> prefix == noun.1 + noun.2

spanish-gender-of-noun(noun)
  starts-with: noun, 'el'; -> 'male'
  starts-with: noun, 'la'; -> 'female'

eq: 'female', (spanish-gender-of-noun: 'la casa') | assert
eq: 'male', (spanish-gender-of-noun: 'el carro') | assert

# implementations of our util functions in memory
init([_, a]) -> _
tail([a, _]) -> _
head([a, _]) -> a
last([_, a]) -> a
get-middle([a, _, b]) -> _


ls = [1, 2, 3, 4, 5]

ls | get-middle | arrEq: @, [2, 3, 4] | assert
ls | init | arrEq: @, [1, 2, 3, 4] | assert
ls | tail | arrEq: @, [2, 3, 4, 5] | assert
ls | head | eq: @, 1 | assert
ls | last | eq: @, 5 | assert

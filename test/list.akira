ok-deep = fn [a b] {
  assert true (foldl (&&) (zip-with (==) a b))
}

array = [
  1
  2
  3
]


-- IIFE
-> {
-- Testing foldr, expressions in arguments, anonymous functions
  lastEl = (= (foldl (= (flip id &0 &1)) &0))
  lastEl [1 2 3] | assert 3
}!

-- Partial application
-> {
  mapper = partial map square
  ok-array = (= (ok-deep &0 [1 4 9]))

  array | map square | ok-array
  array | mapper | ok-array
}!

array.map square | ok-deep [1 4 9]

assert array.1 2

head array | assert 1
init array | ok-deep [1 2]
tail array | ok-deep [2 3]
last array | assert 3

average array | assert 2
min array | assert 1
max array | assert 3

array !! 0 | assert 1
array ++ [4] | ok-deep [1 2 3 4]
0 +: array | ok-deep [0 1 2 3]
ok-deep array [1 2 3]

fs = require: 'fs'
path = require: 'path'
util = require: 'util'
vm = require: 'vm'
escodegen = require: 'escodegen'

lexer = require: './lib/lexer'
Parser = require: './lib/parser'
parser = Parser.parser
parser.yy <+ require: './lib/nodes';
context = {}

compile(buf) -> (
  code = buf.toString:!
  self = Object.create: context
  tokens = lexer.tokenize: code
  parsed = parser.parse: tokens
  run = parsed.compile: self
  ast = parsed.getUtils: self; ++ parsed.addVars: self; ++ run

  program = {
    type = 'Program'
    body = ast
  }

  generated = escodegen.generate: program
  '(function () {' + generated + '}.call(typeof module !== "undefined" ? module.exports : this))'
)

file(filepath) -> path.join: process.env.PWD, filepath | fs.readFileSync | compile


#function run(code) {
#  new_context = Object.create(context)
#  result = null
#  new_context.console = console
#  try {
#    result = vm.runInNewContext(code, new_context)
#  } catch (e) {
#    util.error(e.stack)
#    util.puts(code)
#  }
#  return result
#}

#main
#function memory(args) {
#  action = args[0]
#  switch (action) {
#    case 'test':
#      return run(file('test/tests.mem'))
#    case 'compile':
#      return process.stdout.write(file(args[1]) + '\n')
#    case 'run':
#      return run(file(args[1]))
#  }
#}

memory(item, action)
  'compile' -> process.stdout.write: (file: item)
  'test' ->

export memory

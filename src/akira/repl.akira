context = { @console console }
vm = require: 'vm'
util = require: 'util'

{ @parse @transform @escodegen } = import './compiler.akira'

xform = fn [data] transform: 'repl' data (fn [ast] {
  @type 'Program'
  @body ast
})

to-code = fn [name code] parse: 'repl' code | xform | escodegen.generate

prompt = fn [] process.stdout.write: 'akira> '

inspect = fn [val] util.inspect: val false 35

read-eval-print-loop = fn [data] {
  try {
    code = to-code: 'repl' data
    vm.run-in-new-context: code context |
      inspect |
      util.puts

    util.puts: ''
  } catch {
    util.error: err.stack
  }

  prompt!
}

start-repl = fn [] {

  stdin = process.open-stdin!
  stdin.set-encoding: 'utf-8'
  stdin.on: 'data' read-eval-print-loop

  prompt!
}

export start-repl

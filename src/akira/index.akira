util = require 'util'
me = require '../../package.json'

{ @foreach-file @run @lexer @gen-ast } = import './compiler.akira'
{ @write-file } = import './fisy.akira'
help = import './help.akira'
start-repl = import './repl.akira'
watch = import './watchman.akira'

output = fn [_ code] process.stdout.write code

analyse = fn [_ body]
  body | (-> util.inspect &0 false Infinity) | output none

load-makefile = fn [key opts]
  fn [name code]
    let cmd = key |
      (.replace /[-+|:]([a-zA-Z0-9$_])/g fn [i] { i.1.to-upper-case! })
    then run name ('module.exports = ' ++ code) | (!! cmd) | (-> &0 opts)

--cli = match {
--  ['compile' [a b]] this.compile a b
--  ['output' [a]] this.output a
--  ['run' [a]] this.run a
--  ['tokens' [a]] akira analyse a lex
--  ['ast' [a]] akira analyse a gen-ast
--  ['version' []] 'akira ' ++ me.version | output none
--  ['watch' [a b]] watch a (-> akira fn [name code] {
--    write-file name code a b } a)
--  ['make' [a b & c]] akira (load-makefile a (b || []) ++ c) 'Make.akira'
--  ['repl' []] start-repl!
--  ['help' []] help!
--  [undefined []] start-repl!
--  [else] help &0
--}

compile = fn [from target (f = id)] {
  foreach-file fn [name code] {
    write-file name (f code) from target
  } from
}

to-ast = fn [from target (cb = analyse)] {
  foreach-file cb from gen-ast
}

file-output = (-> foreach-file output &0)

make = fn [cmd (arg = []) args]
  foreach-file (load-makefile cmd arg ++ args) 'Make.akira'

cli-run = fn [filename] {
  foreach-file fn [name code] { run name code } filename
}

module.exports = {
  @cli fn [args] {
    cmd = head args
    opts = tail args

    cond
      cmd is 'make' ? make opts.0 opts.1 opts.2
      cmd is 'compile' ? compile opts.0 opts.1
      cmd is 'output' ? map file-output opts
      cmd is 'run' ? cli-run opts.0
      cmd is 'version' ? 'akira ' ++ me.version | output none
      cmd is 'repl' || cmd is undefined ? start-repl!
      cmd is 'help' ? help!
      else ? help opts
  }

  @compile compile

  @ast to-ast

  @write fn [name code from target] { write-file name code from target }

  @output file-output

  @run fn [filename context] {
    foreach-file fn [name code] { run name code context } filename
  }
}

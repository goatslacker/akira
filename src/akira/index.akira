util = require 'util'
me = require '../../package.json'

{ @run @lexer @gen-program-ast @transpile } = import './compiler.akira'
{ @write-file @get-all-files @get-file } = import './fisy.akira'
help = import './help.akira'

analyse = fn [_ body] {
  body | (-> util.inspect &0 false Infinity) | console.log
}

compile = async [from target] {
  files = await get-all-files from
  map fn [file] {
    try {
      data = transpile file.name file.code
      do (write-file file.name data from target) -> &0
    } catch err {
      console.error 'Filename ' ++ file.name
      console.error err.stack
      process.exit 1
    }
  } files
}

to-ast = async [from (cb = analyse)] {
  files = await get-all-files from
  map fn [file] {
    gen-program-ast file.name file.code | cb file.name
  } files
}

make = async [cmd (args = [])] {
  file = await get-file 'Make.akira'
  key = cmd.replace /[-+|:]([a-zA-Z0-9$_])/g fn [i] { i.1.to-upper-case! }
  code = transpile file.name file.code
  run file.name ('module.exports = ' ++ code) | (!! key) | (-> &0 args)
}

run-a-file = async [filename context] {
  file = await get-file filename
  code = transpile file.name file.code
  run file.name code (context || {})
}

file-output = async [filepath] {
  files = await get-all-files filepath
  map (-> transpile &0.name &0.code | console.log) files
}

lex = async [filepath (cb = console.log)] {
  file = await get-file filepath
  lexer file.code | cb
}

module.exports = {
  @cli fn [args] {
    cmd = head args
    opts = tail args

    cond
      cmd is 'ast' ? to-ast opts.0
      cmd is 'compile' ? compile opts.0 opts.1
      cmd is 'help' ? help!
      cmd is 'make' ? make opts.0 (tail opts)
      cmd is 'output' ? map file-output opts
      cmd is 'run' ? run-a-file opts.0
      cmd is 'tokens' ? lex opts.0
      cmd is 'version' ? console.log ('akira ' ++ me.version)
      else ? help opts
  }

  @ast to-ast
  @compile compile
  @lexer lex
  @output file-output
  @run run-a-file
  @write write-file
}

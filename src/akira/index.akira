util = require: 'util'
me = require: '../../package.json'

{ @akira @run @lex @gen-ast @benchmark } = import './compiler.akira'
{ @write-file @get-files } = import './fisy.akira'
help = import './help.akira'
start-repl = import './repl.akira'
watch = import './watchman.akira'

exports = fn [name code from to]
  write-file: name ('module.exports = ' ++ code) from to

output = fn [name code]
  util.puts: code

analyse = fn [name body]
  body |
  (fn [data] util.inspect: data false 50) |
  output: none

load-makefile = fn [key opts]
  fn [name code] {
    cmd = key |
      (.replace: /[-+|:]([a-zA-Z0-9$_])/g (fn [i] i.2.to-upper-case!))

    make = run: name ('module.exports = ' ++ code)
    (make !! cmd): opts
  }

export {
  @cli (fn [action [a b & c]]
    'compile'   ? this.compile: a b
    'output'    ? this.output: a
    'run'       ? this.run: a
    'tokens'    ? akira: analyse a lex
    'ast'       ? akira: analyse a gen-ast
    'version'   ? 'akira ' ++ me.version | output: none
    'watch'     ? watch: a (fn [] akira: (fn [name code]
      exports: name code a b) a)
    'make'      ? akira: (load-makefile: a (b || []) ++ c) 'Make.akira'
    not action  ? start-repl!
    else        ? help!
  )

  @compile (fn [from target]
    akira: (fn [name code] exports: name code from target) from)

  @output (fn [filename]
    akira: output filename)

  @run (fn [filename context]
    akira: (fn [name code] run: name code context) filename)
}

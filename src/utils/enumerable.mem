export head = \[x] -> x
export init = \[...xs, x] -> xs
export tail = \[x, ...xs] -> xs
export last = \[...xs, x] -> x
export at = \list, index -> list !! index - 1
export get = \obj, prop -> obj !! prop
export length = \of -> of.length
export join = \list, by -> list.join: by
export concat = \none -> foldl: (\a, b -> a ++ b), arguments
export count = \fn, list -> filter: fn, list | @.length
export average = \list -> foldl: (\a, b -> a + b), list | @ / list.length
export compact = \list -> filter: (\x -> not not x), list
export intersect = \list1, list2 -> filter: (\x -> list2.indexOf: x | 0 - 1 isnt @), list1
export max = \list -> foldl: (\a, b -> if a > b then a else b), list
export min = \list -> foldl: (\a, b -> if a < b then a else b), list
export nothing = \fn, list -> filter: fn, list | @.length | @ is 0
export randomize = \list -> sort: (\none -> (Math.random:!) > 0.5), list
export unique = \list -> filter: (\x, i -> list.indexOf: x | i is @), list

export take-while = \fn, [x, ...xs]
  (fn: x) == true -> x +: (take-while: fn, xs)
  else -> []

export take-until = \fn, [x, ...xs]
  (fn: x) == true -> [x]
  else -> x +: (take-until: fn, xs)

jison = require 'jison'

unwrap = /^function\s*\(\)\s*\{\s*return\s*([\s\S]*)\s*\}/

macro n fn [name & args]
  {
    :type 'CallExpression'
    :callee {
      :type 'MemberExpression'
      :computed false
      :object { :type 'Identifier' :name 'yy' }
      :property { :type 'Identifier' :name 'L' }
    }
    :arguments [
      { :type 'Identifier' :name 'yylineno' }
      {
        :type 'NewExpression'
        :callee {
          :type 'MemberExpression'
          :computed false
          :object { :type 'Identifier' :name 'yy' }
          :property name
        }
        :arguments args
      }
    ]
  }

get-match = fn [action]
  x = unwrap.exec action
  if x then x.1 else '({{action}}())'

o = fn [pattern action]
  pattern-string = pattern.replace /\s{2,}/g ' '
  if not action
    [pattern-string '$$ = $1']
  else
    xaction = action | get-match
    [pattern-string '$$ = {{xaction}}']

start-symbol = 'Root'

bnf = {
  :Root [
    ['' 'return $$ = new yy.Nodes;']
    ['Program' 'return $$ = $1']
  ]

  :Program [
    (o 'Terminator Statements' (= $2))
    (o 'Terminator' (= none))
    (o 'Statements')
  ]

  :Statements [
    (o 'Statement' (-> yy.Nodes.wrap $1))
    (o 'Statements TERMINATOR Statement' (-> $1.push $3))
    (o 'Statements ; Body' (-> $1.push $3))
    (o 'Statements TERMINATOR')
  ]

  :Expressions [
    (o 'Expression' (-> yy.Nodes.wrap $1))
    (o 'Expressions TERMINATOR Expression' (-> $1.push $3))
    (o 'Expressions ; Body' (-> $1.push $3))
    (o 'Expressions TERMINATOR')
  ]

  :Terminator [
    (o 'TERMINATOR')
    (o 'Terminator TERMINATOR')
  ]

  :OptTerminator [
    (o '')
    (o 'Terminator')
  ]

  :OptComma [
    (o '')
    (o ',')
  ]

  :BodyOrExpression [
    (o 'Body OptTerminator')
    (o 'Expression Terminator')
  ]

  :Identifier [
    (o 'IDENTIFIER' (-> n Identifier $1))
  ]

  :Prototype [
    (o 'PROTOTYPE' (-> n Identifier '__prototype'))
  ]

  :Rest [
    (o '& IDENTIFIER' (-> n Identifier $2 true))
  ]

  :Body [
    (o 'Indent Expressions DEDENT' (-> $2))
  ]

  :Indent [
    (o 'Terminator INDENT OptTerminator')
  ]

  :Dedent [
    (o 'OptTerminator DEDENT')
  ]

  :Statement [
    (o 'Exporting')
    (o 'Expression')
    (o 'DefMacro')
    (o 'TypeSignature')
    (o 'TypeAlias')
    (o 'Interface')
  ]

  :Expression [
    (o 'Value')
    (o 'If')
    (o 'Assignment')
    (o 'PatternMatching')
    (o 'Cond')
    (o 'Invocation')
    (o 'InlineDeclaration')
    (o 'AsyncFunction')
    (o 'AsyncDo')
    (o 'Awaitable')
    (o 'Let')
    (o 'Pipeline')
    (o 'Cloning')
    (o 'Instantiate')
    (o 'Macro')
    (o 'Raise')
    (o 'Recur')
    (o 'Exceptions')
    (o 'TypeCheck')
    (o 'IMPORT STR' (-> n Import $2))
  ]

  :Value [
    (o 'NUM' (-> n Literal (Number ($1.replace /,/g ''))))
    (o 'NONE' (-> n Literal none))
    (o 'BOOL' (-> n Literal ($1 is 'true')))
    (o 'REGEXP' (-> n Literal $1))
    (o 'Accessibles')
    (o 'SpecialFunctions')
    (o 'Class')
    (o 'Operation')
    (o 'Instance')
    (o '( Indent Expression Dedent Terminator )' (-> $3))
    (o '( Expression OptTerminator )' (-> $2))
  ]

  :Callables [
    (o 'Identifier')
    (o 'Declaration')
    (o 'Prototype')
    (o 'Access')
    (o 'This')
  ]

  :Accessibles [
    (o 'Callables')
    (o 'Strings')
    (o 'Vectors')
    (o 'Maps')
    (o 'ArgumentsShorthand')
    (o '@' (-> n Identifier 'this'))
  ]

  :TypeCheck [
    (o 'TYPE_OPERATOR Value' (-> n Operation $2 '::'))
  ]

  :ArgumentsShorthand [
    (o 'ARGS' (-> n Access (n Identifier 'arguments') (n Literal (Number $1))))
  ]

  :AlphaNumeric [
    (o 'NUM' (-> n Literal (Number ($1.replace /,/g ''))))
    (o 'Strings')
  ]

  :Strings [
    (o 'STR' (-> n Literal (String $1)))
  ]

  :Assignment [
    (o 'Identifier = Expression' (-> n Assignment $1 $3))
    (o 'Access = Expression' (-> n Assignment $1 $3))
    (o 'Vectors = Expression' (-> n Assignment $1 $3))
    (o 'Maps = Expression' (-> n Assignment $1 $3))
    (o 'AccessOperation = Expression' (-> n Assignment $1 $3))
    (o 'This = Expression' (-> n Assignment $1 $3))
  ]

  :Exporting [
    (o 'EXPORT Identifier' (-> n Export $2))
  ]

  :Cloning [
    (o 'Identifier INHERITANCE Arguments' (-> n Cloning $3 $1))
    (o 'Maps Arguments' (-> n Cloning $2 $1))
    (o 'Vectors Arguments' (-> n Cloning $2 $1))
  ]

  :ValuePlusCalls [
    (o 'Value')
    (o 'Invocation')
    (o 'Pipeline')
  ]

  :AllCallables [
    (o 'Accessibles')
    (o 'Invocation')
    (o 'SpecialFunctions')
    (o '( InlineDeclaration )' (-> $2))
  ]

  :Pipeline [
    (o 'Value | OptTerminator AllCallables' (-> n Pipeline $1 $4))
    (o 'Invocation | OptTerminator AllCallables' (-> n Pipeline $1 $4))
    (o 'Pipeline | OptTerminator AllCallables' (-> n Pipeline $1 $4))
  ]

  :Invocation [
    (o 'Callables Arguments' (-> n Call $1 $2))
    (o '| AllCallables' (-> n Call $2))
    (o '& | AllCallables' (-> n Call $3 'apply'))
  ]

  :Declaration [
    (o 'FN [ Parameters ] Body' (-> n Declaration none $3 $5))
    (o 'FN [ ] Body' (-> n Declaration none none $4))
    (o 'LAMBDA Body' (-> n Declaration none none $2))
  ]

  :InlineDeclaration [
    (o 'LAMBDA Expression' (-> n Declaration none none $2))
    (o 'FN [ Parameters ] Expression' (-> n Declaration none $3 $5))
  ]

  :LetOperation [
    (o 'Identifier = Value' (-> n Assignment $1 $3))
  ]

  :LetOperations [
    (o 'LetOperation' (-> n Arguments $1))
    (o 'LetOperations OptTerminator LetOperation' (-> n Arguments $1 $3))
  ]

  :Let [
    (o 'LET Indent LetOperations Dedent Terminator THEN Body' (-> n Let $3 $7))
    (o 'LET Indent LetOperations Dedent Terminator THEN Expression' (-> n Let $3 $7))
    (o 'LET LetOperations THEN Body' (-> n Let $2 $4))
    (o 'LET LetOperations THEN Expression' (-> n Let $2 $4))
  ]

  :AsyncFunction [
    (o 'ASYNC [ ] Body' (-> n AsyncFunction none $4))
    (o 'ASYNC [ Parameters ] Body' (-> n AsyncFunction $3 $5))
  ]

  :MultipleAwaitable [
    (o 'AllCallables TERMINATOR' (-> $1))
  ]

  :MultipleAwaitables [
    (o 'MultipleAwaitable' (-> n Arguments $1))
    (o 'MultipleAwaitables MultipleAwaitable' (-> n Arguments $1 $2))
  ]

  :AwaitBlock [
    (o '{ OptTerminator MultipleAwaitables }' (-> $3))
  ]

  :Awaitable [
    (o 'AWAIT AllCallables' (-> n Await $2 false))
    (o 'AWAIT AwaitBlock' (-> n Await $2 true))
  ]

  :AsyncDo [
    (o 'DO ValuePlusCalls THEN AllCallables CATCH AllCallables' (-> n Do $2 $4 $6))
    (o 'DO ValuePlusCalls Indent THEN AllCallables Terminator CATCH AllCallables Dedent' (-> n Do $2 $5 $8))
    (o 'DO ValuePlusCalls Indent AllCallables Terminator DEDENT Terminator CATCH Indent AllCallables Dedent' (-> n Do $2 $4 $10))
  ]

  :Conditional [
    (o 'Value ? BodyOrExpression' (-> [$1 $3]))
  ]

  :Conditionals [
    (o 'Conditional' (-> n Arguments $1))
    (o 'Conditionals Conditional' (-> n Arguments $1 $2))
  ]

  :CondElse [
    (o 'ELSE ? Expression' (-> [$1 $3]))
    (o 'ELSE ? Body' (-> [$1 $3]))
  ]

  :Cond [
    (o 'COND Indent Conditionals CondElse Dedent' (-> n Cond $3 $4))
  ]

  :Pattern [
    (o '[ ] BodyOrExpression' (-> [none $3]))
    (o '[ VectorArgs ] BodyOrExpression' (-> [$2 $4]))
    (o '[ ELSE ] BodyOrExpression' (-> [$2 $4]))
  ]

  :Patterns [
    (o 'Pattern' (-> n Arguments $1))
    (o 'Patterns Pattern' (-> n Arguments $1 $2))
  ]

  :PatternMatching [
    (o 'MATCH Indent Patterns DEDENT' (-> n Pattern $3))
  ]

  :Vectors [
    (o '[ ]' (-> n Vector))
    (o '[ VectorArgs ]' (-> n Vector $2))
    (o '[ Indent VectorArgs Dedent Terminator ]' (-> n Vector $3))
  ]

  :VectorArg [
    (o 'Value')
    (o 'Rest')
  ]

  :VectorArgs [
    (o 'VectorArg' (-> n Arguments $1))
    (o 'VectorArgs OptTerminator VectorArg' (-> n Arguments $1 $3))
  ]

  :Key [
    (o 'KEY' (-> n Identifier $1))
  ]

  :This [
    (o 'THIS' (-> n Access (n Identifier 'this') (n Identifier $1)))
  ]

  :KeyValue [
    (o 'Key' (-> n Assignment $1 none))
    (o 'Key ValuePlusCalls' (-> n Assignment $1 $2))
  ]

  :MapItems [
    (o 'KeyValue' (-> n Arguments $1))
    (o 'MapItems OptTerminator KeyValue' (-> n Arguments $1 $3))
  ]

  :TypeAlias [
    (o 'TYPEALIAS Identifier TypeValue' (-> n TypeAlias (n TypeSignature $2 '' $3)))
  ]

  :Maps [
    (o '{ }' (-> n Map))
    (o '{ MapItems }' (-> n Map $2))
    (o '{ Indent MapItems Dedent Terminator }' (-> n Map $3))
  ]

  :Access [
    (o 'Accessibles Accessor' (-> n Access $1 $2))
  ]

  :Accessor [
    (o '. Identifier' (-> $2))
    (o '. AlphaNumeric' (-> $2))
    (o '. PROTOTYPE' (-> $2))
  ]

  :Arguments [
    (o 'Value' (-> n Arguments $1))
    (o 'Rest')
    (o 'Arguments OptComma Value' (-> n Arguments $1 $3))
  ]

  :Param [
    (o 'Identifier')
    (o '( Identifier = Value )' (-> n Assignment $2 $4))
    (o 'Rest')
    (o 'This')
    (o 'Vectors')
    (o 'Maps')
  ]

  :Parameters [
    (o 'Param' (-> n Arguments $1))
    (o 'Parameters OptComma Param' (-> n Arguments $1 $3))
  ]

  :ClassMember [
    (o 'Identifier [ Parameters ] BodyOrExpression' (-> n ClassMethod $1 $3 $5))
    (o 'Identifier [ ] BodyOrExpression' (-> n ClassMethod $1 none $4))
    (o 'This Value Terminator' (-> [$1 $2]))
  ]

  :ClassMembers [
    (o 'ClassMember' (-> n Arguments $1))
    (o 'ClassMembers ClassMember' (-> n Arguments $1 $2))
  ]

  :Constructor [
    (o '[ Parameters ] BodyOrExpression' (-> n ClassMethod none $2 $4))
    (o '[ ] BodyOrExpression' (-> n ClassMethod none none $3))
  ]

  :OptImplements [
    (o '' (-> none))
    (o 'TYPE_OPERATOR Identifier' (-> $2))
  ]

  :OptInherits [
    (o '' (-> none))
    (o 'INHERITANCE Identifier' (-> $2))
  ]

  :Class [
    (o 'CLASS OptInherits OptImplements Indent Constructor DEDENT' (-> n Class $5 [] $3 $2))
    (o 'CLASS OptInherits OptImplements Indent Constructor ClassMembers DEDENT' (-> n Class $5 $6 $3 $2))
  ]

  :KeyType [
    (o 'Key TypeValue' (-> [$1 $2]))
  ]

  :InterfaceKeys [
    (o 'KeyType' (-> n Arguments $1))
    (o 'InterfaceKeys KeyType' (-> n Arguments $1 $2))
  ]

  :Interface [
    (o 'INTERFACE Identifier { OptTerminator InterfaceKeys OptTerminator }' (-> n Interface $2 $5))
  ]

  :Instantiate [
    (o 'NEW Callables Arguments' (-> n Instantiate (n Call $2 $3)))
    (o 'NEW Callables' (-> n Instantiate (n Call $2)))
  ]

  :Exceptions [
    (o 'TRY Body Terminator CATCH Identifier Body' (-> n ExceptionGuard $2 $5 $6))
  ]

  :Raise [
    (o 'RAISE Value ErrorType' (-> n Exception $1 $2 $3))
  ]

  :ErrorType [
    (o '' (-> none))
    (o 'Identifier')
  ]

  :Recur [
    (o 'RECUR Arguments' (-> n Recur $2))
  ]

  :If [
    (o 'Value IF ValuePlusCalls' (-> n If $3 $1 none))
    (o 'IF ValuePlusCalls THEN Expression ELSE Expression' (-> n If $2 $4 $6))
    (o 'IF ValuePlusCalls Indent THEN Expression Terminator ELSE Expression Dedent' (-> n If $2 $5 $8))
    (o 'IF ValuePlusCalls Body Terminator ELSE Body' (-> n If $2 $3 $6))
  ]

  :DefMacro [
    (o 'MACRO Identifier Declaration' (-> n Macro $2 $3))
  ]

  :TypeValues [
    (o 'Identifier')
    (o 'VectorType')
    (o 'MapType')
    (o 'ASYNC LAMBDA Identifier' (-> n Type $3 'async'))
    (o 'MAYBE TypeValues' (-> n Type $2 'maybe'))
  ]

  :TypeValue [
    (o 'TypeValues')
    (o 'TypeValues | TypeValue' (-> n Type [$1 $3] 'or'))
  ]

  :VectorType [
    (o '[ TypeParams ]' (-> n Type $2 'vector'))
  ]

  :MapType [
    (o '{ OptTerminator MapTypeParams OptTerminator }' (-> n Type $3 'map'))
  ]

  :MaybeTypeParams [
    (o '')
    (o 'TypeParams')
  ]

  :TypeKeyValue [
    (o 'Key' (-> n Assignment $1 none))
    (o 'Key TypeValue' (-> n Assignment $1 $2))
  ]

  :MapTypeParams [
    (o 'TypeKeyValue' (-> n Arguments $1))
    (o 'MapTypeParams TypeKeyValue' (-> n Arguments $1 $2))
  ]

  :TypeParams [
    (o 'TypeValue' (-> n Arguments $1))
    (o 'TypeParams TypeValue' (-> n Arguments $1 $2))
  ]

  :TypeSignature [
    (o 'Identifier TYPE_OPERATOR MaybeTypeParams LAMBDA TypeValue' (-> n TypeSignature $1 $3 $5))
  ]

  :Macro [
    (o '` OptTerminator Statement' (-> n Evaluate $3))
    (o '~ OptTerminator Statement' (-> n Evaluate $3 true))
  ]

  :Operators [
    (o '+' (-> n Identifier 'sum'))
    (o '-' (-> n Identifier 'sub'))
    (o '*' (-> n Identifier 'prod'))
    (o '* *' (-> n Identifier 'pow'))
    (o '/' (-> n Identifier 'div'))
    (o 'COMPARE' (-> n Compare $1))
    (o 'LOGIC' (-> n Logic none $1 none true))
  ]

  :SugaryFunctions [
    (o 'Operators' (-> $1))
    (o 'Accessor' (-> n Declaration '->' (n Arguments 'it') (n Access 'it' $1)))
    (o 'Accessor Arguments' (-> n Declaration '->' (n Arguments 'it') (n Call (n Access 'it' $1) $2)))
    (o 'COMPARE Value' (-> n Declaration '->' (n Arguments 'it') (n Compare 'it' $1 $2)))
    (o 'LOGIC Value' (-> n Declaration '->' (n Arguments 'it') (n Logic 'it' $1 $2)))
    (o 'LEFT_OPERATORS Value' (-> n Declaration '->' (n Arguments 'it') (n Operation 'it' $1 $2)))
    (o 'ACCESSOR_OPERATOR Value' (-> n Declaration '->' (n Arguments 'it') (n Operation 'it' $1 $2)))
    (o '= Value' (-> n Declaration '->' (n Arguments 'it') $2))
    (o '+ Value' (-> n Declaration '->' (n Arguments 'it') (n Operation 'it' $1 $2)))
    (o '- Value' (-> n Declaration '->' (n Arguments 'it') (n Operation 'it' $1 $2)))
    (o '* Value' (-> n Declaration '->' (n Arguments 'it') (n Operation 'it' $1 $2)))
    (o '* * Value' (-> n Declaration '->' (n Arguments 'it') (n Operation 'it' '**' $3)))
    (o '/ Value' (-> n Declaration '->' (n Arguments 'it') (n Operation 'it' $1 $2)))
  ]

  :SpecialFunctions [
    (o '( SugaryFunctions )' (-> $2))
  ]

  :AccessOperation [
    (o 'Value ACCESSOR_OPERATOR OptTerminator Value' (-> n Operation $1 $2 $4))
  ]

  :Operation [
    (o 'Value COMPARE OptTerminator Value' (-> n Compare $1 $2 $4))
    (o 'Value LOGIC OptTerminator Value' (-> n Logic $1 $2 $4))
    (o 'AccessOperation')
    (o 'Value LEFT_OPERATORS OptTerminator Value' (-> n Operation $1 $2 $4))
    (o 'Value RIGHT_OPERATORS OptTerminator Value' (-> n Operation $1 $2 $4))
    (o 'Value INSTANCEOF Value' (-> n Inst $1 $3))
    (o 'NOT Value' (-> n Compare $2 $1))
    (o 'Value + OptTerminator Value' (-> n Operation $1 '+' $4))
    (o 'Value - OptTerminator Value' (-> n Operation $1 '-' $4))
    (o 'Value * OptTerminator Value' (-> n Operation $1 '*' $4))
    (o 'Value * * OptTerminator Value' (-> n Operation $1 '**' $5))
    (o 'Value / OptTerminator Value' (-> n Operation $1 '/' $4))
  ]
}


tokens = [
  'ASSERT' 'IF' 'THEN' 'ELSE'
  'FN' 'MATCH' 'KEY' 'LAMBDA'
  'IDENTIFIER' 'BOOL' 'NUM' 'STR'
  'LOGIC' 'COMPARE' 'DO' 'RETURN'
  'TERMINATOR'
]

operators = [
  ['right' 'NOT']
  ['right' 'IF' 'THEN' 'ELSE' 'IMPORT' 'EXPORT']
  ['right' '=' '|']
  ['right' 'RIGHT_OPERATORS']
  ['nonassoc' '(' ')' '[' ']' '{' '}' ':']
  ['left' 'LOGIC']
  ['left' 'COMPARE']
  ['left' 'INSTANCEOF']
  ['left' 'LEFT_OPERATORS']
  ['left' 'ACCESSOR_OPERATOR']
  ['left' '+' '-']
  ['left' '*' '**' '/']
]

module.exports = new jison.Parser { :tokens :bnf :operators :start-symbol }

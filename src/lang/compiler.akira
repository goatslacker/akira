escodegen = require 'escodegen'
dune = require 'dune'
lexer = require './lexer'
implicit-return = require 'z/implicitReturn'
{ :parser } = require './parser'
parser.yy = (require '../lang/nodes')
parser.lexer = {
  :lex fn []
    ref = this.tokens !! this.pos || ['']
    this.pos = this.pos + 1
    this.yytext = ref.1
    this.yylineno = ref.3
    ref.0

  :set-input fn [tokens]
    this.tokens = tokens
    this.pos = 0
}
me = require '../../package.json'
prelude = require 'prelude'

HEADER = '// Generated by Akira v' ++ me.version
OPTIONS = {
  :format {
    :indent {
      :style '  '
      :base 0
    }
  }
  :comment true
  :directive true
}
COMPACT = { :format { :compact true } }

make-program = fn [body context]
  exported = context !! '$$$exported'
  (body.push exported) if exported
  implicit-return body
  {
    :type 'Program'
    :body body
  }

transform = fn [name parsed]
  cond
    parsed is none ?
      { :core none :body (make-program '' {}) }
    else ?
      context = {}
      lexer prelude | parser.parse | (.compile {} 'prelude')
      body = parsed.compile context name
      dependencies = parsed.add-deps context
      parsed.flag-core-methods body
      {
        :core (| parsed.add-core)
        :body (make-program (parsed.add-vars context) ++ dependencies ++ (parsed.add-contracts body) context)
      }

gen-program-ast = fn [name code]
  lexer code | parser.parse | transform name | (-> &0.body)

transpile = fn [name code]
  lexer code | parser.parse | transform name | fn [x]
    { :core :body } = x
    top = escodegen.generate ({ :type 'Program' :body core }) COMPACT
    bottom = escodegen.generate body OPTIONS
    [HEADER '!function() {' top bottom '}();'] | (.join '\n')

replify = fn [name code]
  ast = gen-program-ast name code
  program = {
    :type 'Program'
    :body [{
      :type 'ExpressionStatement'
      :expression {
        :type 'AssignmentExpression'
        :operator '='
        :left {
          :type 'MemberExpression'
          :object { :type 'Identifier' :name 'this' }
          :property { :type 'Identifier' :name '_$resultValue' }
        }
        :right ast.body.0.expression
      }
    }]
  }
  escodegen.generate program OPTIONS

run = fn [name code context]
  try
    dune.string code name context
  catch err
    console.error name
    console.error err.stack
    none

module.exports = {
  :gen-program-ast
  :lexer
  :run
  :transpile
  :replify
}

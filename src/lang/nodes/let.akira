ExpressionStatement = require 'ast/ExpressionStatement'
ast = require 'ast'
beta-redex = require 'z/betaRedex'
implicit-return = require 'z/implicitReturn'
get-scope = require 'z/getScope'

Let = class
  [body ret]
    this.body = body.args.slice 0
    this.ret = ret

  compile [context]
    scope = get-scope context []
    nodes = | this.body.reverse
    ret = ast this.ret scope

    body = foldl (fn [nodes node]
      expr = ExpressionStatement (ast node scope)
      [expr] ++ nodes
    ) [ret] ++ nodes

    implicit-return body

    beta-redex body scope


module.exports = Let

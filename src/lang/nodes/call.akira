CallExpression = require 'ast/CallExpression'
ExpressionStatement = require 'ast/ExpressionStatement'
Identifier = require 'ast/Identifier'
MemberExpression = require 'ast/MemberExpression'
Store = require 'Store'
TypeSystem = require 'TypeSystem'
ast = require 'ast'
escodegen = require 'escodegen'
esprima = require 'esprima'
obj2str = require 'z/obj2str'
unwrap-expression-statement = require 'z/unwrapExpressionStatement'
vm = require 'vm'

run-macro = fn [name xargs context]
  ast = Store.macros !! name
  args = obj2str xargs | esprima.parse
  elements = args.body.0.expression.elements || []
  code = CallExpression ast elements | ExpressionStatement | escodegen.generate
  scope = copy (copy {} context) this
  vm.run-in-new-context code scope

type-check-params = fn [inferred signed context line name]
  zip-with (fn [provided expected]
    if a is none || b is none
      none
    else
      raise 'Expected {{expected}} but got {{provided}} for function {{name}} ' ++ 'at {{context.$$$filename}} line {{line}}' TypeError
  ) inferred signed

verify-number-params = fn [name params context line]
  type = Store.types !! name
  tparams = type.params

  if tparams
    params-unbalanced = tparams.length != params.length
    (console.warn '{{name}} was signed with {{tparams.length}} arguments yet it was provided with {{params.length}} ' ++ 'at {{context.$$$filename}} line {{line}}') if params-unbalanced is true
  else
    none

verify-types = fn [name params context line]
  type = Store.types !! name
  xparams = if params is Vector then params else []

unwrap = fn [xargs]
  (map unwrap-expression-statement xargs) if xargs

return-function = fn [callee args params context line]
  (verify-types callee.name args context line) if Store.types !! callee.name

  if args && args.__rest is true
    then CallExpression (MemberExpression callee (Identifier 'apply')) [(Identifier 'null') args]
    else if params == 'apply'
      then CallExpression (MemberExpression callee (Identifier 'apply')) [(Identifier 'null') (Identifier 'arguments')]
      else CallExpression callee (unwrap args)

Call = class
  [@ref @params]
    this

  compile [context]
    callee = ast this.ref context
    args = ast this.params context

    if callee.type == 'Identifier' && Store.macros !! callee.name
      then run-macro callee.name args context
      else return-function callee args this.params context this.line

module.exports = Call

ast = require 'ast'
CallExpression = require 'ast/CallExpression'
MemberExpression = require 'ast/MemberExpression'
Identifier = require 'ast/Identifier'
Literal = require 'ast/Literal'
Store = require 'Store'

AkiraDOM = Identifier 'React'
AkiraDOM.__core = true
CreateVNode = MemberExpression AkiraDOM (Identifier 'DOM')

nodes = {
  @a
  @abbr
  @address
  @area
  @article
  @aside
  @audio
  @b
  @base
  @bdi
  @bdo
  @big
  @blockquote
  @body
  @br
  @button
  @canvas
  @caption
  @cite
  @code
  @col
  @colgroup
  @data
  @datalist
  @dd
  @del
  @details
  @dfn
  @div
  @dl
  @dt
  @em
  @embed
  @fieldset
  @figcaption
  @figure
  @footer
  @form
  @h1
  @h2
  @h3
  @h4
  @h5
  @h6
  @head
  @header
  @hr
  @html
  @i
  @iframe
  @img
  @input
  @ins
  @kbd
  @keygen
  @label
  @legend
  @li
  @link
  @main
  @map
  @mark
  @menu
  @menuitem
  @meta
  @meter
  @nav
  @noscript
  @object
  @ol
  @optgroup
  @option
  @output
  @p
  @param
  @pre
  @progress
  @q
  @rp
  @rt
  @ruby
  @s
  @samp
  @script
  @section
  @select
  @small
  @source
  @span
  @strong
  @style
  @sub
  @summary
  @sup
  @table
  @tbody
  @td
  @textarea
  @tfoot
  @th
  @thead
  @time
  @title
  @tr
  @track
  @u
  @ul
  @var
  @video
  @wbr
  @circle
  @defs
  @ellipse
  @g
  @line
  @linearGradient
  @mask
  @path
  @pattern
  @polygon
  @polyline
  @radialGradient
  @rect
  @stop
  @svg
  @text
  @tspan
}

Markup = class {
  [@node @props @children] { this }

  compile[context] {
    props = ast this.props context
    children = ast this.children context
    node = Identifier this.node.name

    if nodes !! this.node.name
      then CallExpression (MemberExpression CreateVNode node) [props children]
      else CallExpression node [props children]
  }
}

module.exports = Markup

ast = require 'ast'
CallExpression = require 'ast/CallExpression'
FunctionExpression = require 'ast/FunctionExpression'
Identifier = require 'ast/Identifier'
MemberExpression = require 'ast/MemberExpression'

xthen = Identifier 'then'
PromiseNode = Identifier 'Promise'
PromiseNode.__core = true
supported-async-fns = ['map' 'filter']

xchange-if-async-caller = fn [call] {
  name = call.callee.name
  xform = any (-> &0 is name) supported-async-fns
  if xform is true
    then CallExpression (MemberExpression PromiseNode call.callee) call.arguments
    else call
}

Await = class {
  [@call] { this }

  compile [context] {
    call = ast this.call context
    callback = FunctionExpression none [] []

    caller = if call.callee.type == 'Identifier'
      then xchange-if-async-caller call
      else call

    node = CallExpression (MemberExpression caller xthen) [callback]
    node.__await = true
    node
  }
}

module.exports = Await

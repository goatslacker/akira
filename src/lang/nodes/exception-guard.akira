Identifier = require 'ast/Identifier'
ExpressionStatement = require 'ast/ExpressionStatement'
ast = require 'ast'

make-array = require 'z/makeArray'

make-block = fn [expr]
  {
    :type 'BlockStatement'
    :body expr | make-array
  }

ExceptionGuard = class
  [@tr @id @ca] this

  compile [context]
    {
      :type 'TryStatement'
      :block ast this.tr context | ExpressionStatement | make-block
      :handlers [{
        :type 'CatchClause'
        :param ast this.id context
        :guard none
        :body ast this.ca context | ExpressionStatement | make-block
      }]
      :finalizer none
    }

module.exports = ExceptionGuard

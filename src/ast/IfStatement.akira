make-array = require 'makeArray'

make-block = fn [expr]
  {
    @type 'BlockStatement'
    @body (make-array expr)
  }

can-be-conditional = fn [consequent alternate]
  consequent is Map &&
  alternate is Map &&
  consequent.type != 'ThrowStatement' &&
  alternate.type != 'ThrowStatement'

ConditionalExpression = fn [test consequent alternate]
  {
    @type 'ConditionalExpression'
    @test test
    @consequent consequent
    @alternate alternate
  }

IfStatement :: Map Vector | Map Maybe Vector | Maybe Map -> Map
IfStatement = fn [test consequent alternate]
  cond
    (can-be-conditional consequent alternate) ? ConditionalExpression test consequent alternate
    else ? {
      @type 'IfStatement'
      @test test
      @consequent (make-block consequent)
      @alternate ((make-block alternate) if alternate)
    }

module.exports = IfStatement

fs = require: 'fs'
jison = require: 'jison'

unwrap = /^function\s*\(\)\s*\{\s*return\s*([\s\S]*)\s*\}/

getMatch(x, action) -> if x then x.2 else '(' + action + '())'

o(pattern, action) -> (
  patternStringRegExp = /\s{2,}/g
  patternString = pattern.replace: patternStringRegExp, ' '
  if action == null
    then [patternString, '$$ = $1']
    else (
      action2 = getMatch: (unwrap.exec: action), action
      action3 = action2.replace: /\bnew /g, '$&yy.'
      action4 = action3.replace: /\b(?:Nodes\.wrap)\b/g, 'yy.$&'
      [patternString, '$$ = ' + action4]
    )
)

bnf = {
  Root = [
    ['', 'return $$ = new yy.Nodes;']
    ['Program', 'return $$ = $1']
  ]

  Program = [
    o: 'Terminator Expressions', (=-> $2);
    o: 'Expressions';
  ]

  Expressions = [
    o: 'Body', (=-> Nodes.wrap: $1);
    o: 'Expressions TERMINATOR Body', (=-> $1.push: $3);
    o: 'Expressions TERMINATOR';
  ]

  Terminator = [
    o: 'TERMINATOR';
    o: 'Terminator TERMINATOR';
  ]

  OptTerminator = [
    o: '';
    o: 'Terminator';
  ]

  Identifier = [
    o: 'IDENTIFIER', (=i -> $1.replace: /-([a-z])/g, (=i -> i.2.toUpperCase: ()));
  ]

  Utils = [
    o: 'UTILS', (=-> construct Utils: $1);
  ]

  Body = [
    o: 'Expression';
    o: '( OptTerminator Expressions )', (=-> $3);
  ]

  SExpression = [
    o: '( Expression )', (=-> $2);
  ]

  Expression = [
    o: 'Modules';
    o: 'Value';
    o: 'If';
    o: 'Assignment';
    o: 'ARGUMENTS';
    o: 'Invocation';
    o: 'Pipeline';
    o: 'Declaration';
    o: 'PatternMatching';
    o: 'JAVASCRIPT', (=-> construct JavaScript: $1);
    o: 'Construct';
  ]

  Value = [
    o: 'Literal';
    o: 'Lists';
    o: 'Tuples';
    o: 'ExplicitInvocation';
    o: 'Operation';
    o: 'Access';
    o: 'Utils';
  ]

  Values = [
    o: 'Value';
    o: 'Invocation';
  ]

  Literal = [
    o: 'Identifier';
    o: 'AlphaNumeric';
    o: 'BOOL', (=-> construct Literal: (Boolean: $1));
    o: 'REGEXP', (=-> construct Literal: $1);
  ]

  AlphaNumeric = [
    o: 'NUMBER', (=-> construct Literal: (Number: $1));
    o: 'STRING', (=-> construct Literal: (String: $1));
  ]

  Assignment = [
    o: 'Identifier = Body', (=-> construct Assignment: $1, $3);
  ]

  Modules = [
    o: 'EXPORT Identifier', (=-> construct Export: $2);
    o: 'IMPORT STRING', (=-> construct Import: $2);
  ]

  Construct = [
    o: 'CONSTRUCT Invocation', (=-> construct Construction: $2);
  ]

  Piped = [
    o: 'Identifier';
    o: 'SExpression';
    o: 'Access';
    o: 'Utils';
  ]

  Pipeline = [
    o: 'Value | Piped', (=-> construct Call: $3, $1);
    o: 'Invocation | Piped', (=-> construct Call: $3, $1);
    o: 'Pipeline | Piped', (=-> construct Call: $3, $1);
  ]

  Invocation = [
    o: 'Identifier : Arguments', (=-> construct Call: $1, $3);
    o: 'Utils : Arguments', (=-> construct Call: $1, $3);
    o: 'Access : Arguments', (=-> construct Call: $1, $3);
  ]

  ExplicitInvocation = [
    o: 'Invocation ;', (=-> $1);
  ]

  Declaration = [
    o: 'Identifier ( Parameters ) LAMBDA Body', (=-> construct Declaration: $1, $3, $6);
    o: '= Parameters LAMBDA Body', (=-> construct Declaration: null, $2, $4);
    o: 'LAMBDA Body', (=-> construct Call: (construct Declaration: null, null, $2), null);
  ]

  Pattern = [
    o: 'Value LAMBDA Values TERMINATOR', (=-> [$1, $3] );
  ]

  Patterns = [
    o: 'Pattern', (=-> construct Arguments: $1);
    o: 'Patterns Pattern', (=-> construct Arguments: $1, $2);
  ]

  PatternMatching = [
    o: 'Identifier ( Parameters ) = TERMINATOR Patterns', (=-> construct Declaration: $1, $3, (construct Pattern: $3, $7));
  ]

  Comma = [
    o: ', OptTerminator';
  ]

  Lists = [
    o: '[ ]', (=-> construct List: ());
    o: '[ OptTerminator ListArgs OptTerminator ]', (=-> construct List: $3);
  ]

  ListArgs = [
    o: 'Arg', (=-> construct Arguments: $1);
    o: 'ListArgs Comma Arg', (=-> construct Arguments: $1, $3);
    o: 'ListArgs Terminator Arg', (=-> construct Arguments: $1, $3);
  ]

  KeyValue = [
    o: 'Identifier = Value', (=-> construct Assignment: $1, $3);
  ]

  TupleItems = [
    o: 'KeyValue', (=-> construct Arguments: $1);
    o: 'TupleItems Comma KeyValue', (=-> construct Arguments: $1, $3);
    o: 'TupleItems Terminator KeyValue', (=-> construct Arguments: $1, $3);
  ]

  Tuples = [
    o: '{ OptTerminator TupleItems OptTerminator }', (=-> construct Tuple: $3);
  ]

  Access = [
    o: 'Identifier Accessor', (=-> construct Access: $1, $2);
    o: 'Access Accessor', (=-> construct Access: $1, $2);
  ]

  Accessor = [
    o: '. Literal', (=-> $2);
  ]

  Arg = [
    o: 'Value';
    o: 'SExpression';
    o: 'ARGUMENTS';
  ]

  Arguments = [
    o: '( )', (=-> null);
    o: 'Arg', (=-> construct Arguments: $1);
    o: 'Arguments Comma Arg', (=-> construct Arguments: $1, $3);
  ]

  Param = [
    o: 'Identifier';
  ]

  Parameters = [
    o: '', (=-> null);
    o: 'Param', (=-> construct Arguments: $1);
    o: 'Parameters , Param', (=-> construct Arguments: $1, $3);
  ]

  If = [
    o: 'IF Values OptTerminator THEN Body OptTerminator ELSE Body', (=-> construct If: $2, $5, $8);
  ]

  Operation = [
    o: 'Value COMPARE Value', (=-> construct Compare: $1, $2, $3);
    o: 'Value LOGIC Value', (=-> construct Compare: $1, $2, $3);
    o: 'Value + Value', (=-> construct Operation: $1, '+', $3);
    o: 'Value - Value', (=-> construct Operation: $1, '-', $3);
    o: 'Value * Value', (=-> construct Operation: $1, '*', $3);
    o: 'Value / Value', (=-> construct Operation: $1, '/', $3);
  ]
}


tokens = [
  'ASSERT', 'ARGUMENTS', 'IF', 'THEN', 'ELSE',
  'LAMBDA',
  'IDENTIFIER', 'BOOL', 'NUMBER', 'STRING',
  'LOGIC', 'COMPARE',
  'TERMINATOR'
]

operators = [
  ['right', 'IF', 'THEN', 'ELSE', 'IMPORT', 'EXPORT', 'ASSERT', 'ARGUMENTS']
  ['right', '=', '|']
  ['nonassoc', '(', ')', '[', ']', '{', '}']
  ['left', 'LOGIC']
  ['left', 'COMPARE']
  ['left', '+', '-']
  ['left', '*', '/']
]

Parser = jison.Parser
grammar = {
  tokens = tokens
  bnf = bnf
  operators = operators
  startSymbol = 'Root'
}

parser = construct Parser: grammar
fs.writeFileSync: './lib/parser.js', (parser.generate: ()), 'utf8'

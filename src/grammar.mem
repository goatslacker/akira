jison = require: 'jison'

unwrap = /^function\s*\(\)\s*\{\s*return\s*([\s\S]*)\s*\}/

getMatch = \action {
  x = unwrap.exec: action
  if x then x.2 else '({{action}}())'
}

addYY = \str -> str.replace: /new /g, 'new yy.'
addLine = \str -> 'yy.L(yylineno, ' ++ (str.replace: ';', '') ++ ');'

o = \pattern, action {
  pattern-string = pattern.replace: /\s{2,}/g, ' '
  if not action
    then [pattern-string, '$$ = $1']
    else {
      newaction = action | getMatch | addYY | addLine
      [pattern-string, '$$ = {{newaction}}']
    }
}

bnf = ({
  Root = [
    ['', 'return $$ = new yy.Nodes;']
    ['Program', 'return $$ = $1']
  ]

  Program = [
    (o: 'Terminator Expressions', (\none -> $2))
    (o: 'Expressions')
  ]

  Expressions = [
    (o: 'Body', (\none -> yy.Nodes.wrap: $1))
    (o: 'Expressions TERMINATOR Body', (\none -> $1.push: $3))
    (o: 'Expressions TERMINATOR')
  ]

  Terminator = [
    (o: 'TERMINATOR')
    (o: 'Terminator TERMINATOR')
  ]

  OptTerminator = [
    (o: '')
    (o: 'Terminator')
  ]

  Identifier = [
    (o: 'IDENTIFIER', (\none -> clone Identifier: $1))
  ]

  IdentifierNoUtils = [
    (o: 'IDENTIFIER', (\none -> clone Identifier: $1, true))
  ]

  Prototype = [
    (o: 'PROTOTYPE', (\none -> clone Identifier: $1))
  ]

  Rest = [
    (o: '. . . IDENTIFIER', (\none -> clone Identifier: $4, false, true))
  ]

  Body = [
    (o: 'Expression')
    (o: '{ OptTerminator Expressions }', (\none -> $3))
  ]

  Expression = [
    (o: 'Modules')
    (o: 'Assignable')
    (o: 'Exceptions')
    (o: 'Objects')
  ]

  Assignable = [
    (o: 'Value')
    (o: 'If')
    (o: 'Assignment')
    (o: 'Declaration')
    (o: 'PatternMatching')
    (o: 'Invocation')
    (o: 'Pipeline')
    (o: 'Cloning')
    (o: 'Comprehensions')
    (o: 'Prototype')
    (o: 'IMPORT STR', (\none -> clone Import: $2))
  ]

  Value = [
    (o: 'Literal')
    (o: 'Lists')
    (o: 'Maps')
    (o: 'Operation')
    (o: 'Access')
    (o: 'Type')
    (o: '@')
    (o: '( Assignable )', (\none -> $2))
  ]

  Values = [
    (o: 'Value')
    (o: 'Invocation')
  ]

  Type = [
    (o: 'TYPE', (\none -> clone Identifier: $1))
  ]

  Literal = [
    (o: 'Identifier')
    (o: 'AlphaNumeric')
    (o: 'NONE', (\none -> clone Literal: none))
    (o: 'BOOL', (\none -> clone Literal: ($1 == 'true')))
    (o: 'REGEXP', (\none -> clone Literal: $1))
  ]

  AlphaNumeric = [
    (o: 'NUM', (\none -> clone Literal: (Number: $1)))
    (o: 'Strings')
  ]

  Strings = [
    (o: 'STR', (\none -> clone Literal: (String: $1)))
  ]

  Assignment = [
    (o: 'Identifier = Assignable', (\none -> clone Assignment: $1, $3))
    (o: 'Access = Assignable', (\none -> clone Assignment: $1, $3))
    (o: 'Lists = Assignable', (\none -> clone Assignment: $1, $3))
    (o: 'Maps = Assignable', (\none -> clone Assignment: $1, $3))
  ]

  Objects = [
    (o: 'OBJECT Identifier OptClones Maps', (\none -> clone Objects: $2, $3, $4))
  ]

  OptClones = [
    (o: '', (\none -> none))
    (o: 'CLONES Identifier', (\none -> $2))
  ]

  Modules = [
    (o: 'EXPORT Assignable', (\none -> clone Export: $2))
  ]

  Cloning = [
    (o: 'CLONE Invocation', (\none -> clone Construction: $2))
  ]

  Pipeline = [
    (o: 'Value | Values', (\none -> clone Pipeline: $1, $3))
    (o: 'Invocation | Values', (\none -> clone Pipeline: $1, $3))
    (o: 'Pipeline | Values', (\none -> clone Pipeline: $1, $3))
  ]

  Invocation = [
    (o: 'Value : Arguments', (\none -> clone Call: $1, $3))
    (o: 'Value !', (\none -> clone Call: $1))
  ]

  Declaration = [
    (o: '\ Parameters LAMBDA Expression', (\none -> clone Declaration: none, $2, $4))
    (o: '\ Parameters Body', (\none -> clone Declaration: none, $2, $3))
  ]

  Pattern = [
    (o: 'Value LAMBDA Body TERMINATOR', (\none -> [$1, $3] ))
  ]

  Patterns = [
    (o: 'Pattern', (\none -> clone Arguments: $1))
    (o: 'Patterns Pattern', (\none -> clone Arguments: $1, $2))
  ]

  Default = [
    (o: 'ELSE LAMBDA Body TERMINATOR', (\none -> clone Arguments: [$1, $3]))
  ]

  PatternMatching = [
    (o: '\ Parameters TERMINATOR Patterns Default', (\none -> clone Declaration: none, $2, (clone Pattern: $2, $4, $5)))
  ]

  Comma = [
    (o: ', OptTerminator')
  ]

  Comprehensions = [
    (o: 'NUM . . Numbers ComprehensionBy ComprehensionFunction', (\none -> clone Comprehension: $1, $4, $5, $6))
    (o: 'Identifier . . Numbers ComprehensionBy ComprehensionFunction', (\none -> clone Comprehension: $1, $4, $5, $6))
  ]

  Numbers = [
    (o: 'NUM')
    (o: 'Identifier')
  ]

  ComprehensionFunction = [
    (o: '', (\none -> none))
    (o: ', Declaration', (\none -> $2))
  ]

  ComprehensionBy = [
    (o: '', (\none -> clone Literal: 1))
    (o: 'Numbers')
  ]

  Lists = [
    (o: '[ ]', (\none -> clone List!))
    (o: '[ OptTerminator ListArgs OptTerminator ]', (\none -> clone List: $3))
  ]

  ListArgs = [
    (o: 'Arg', (\none -> clone Arguments: $1))
    (o: 'ListArgs Comma Arg', (\none -> clone Arguments: $1, $3))
    (o: 'ListArgs Terminator Arg', (\none -> clone Arguments: $1, $3))
  ]

  KeyValue = [
    (o: 'IdentifierNoUtils', (\none -> clone Assignment: $1, $1))
    (o: 'IdentifierNoUtils = Value', (\none -> clone Assignment: $1, $3))
  ]

  MapItems = [
    (o: 'KeyValue', (\none -> clone Arguments: $1))
    (o: 'MapItems Comma KeyValue', (\none -> clone Arguments: $1, $3))
    (o: 'MapItems Terminator KeyValue', (\none -> clone Arguments: $1, $3))
  ]

  Maps = [
    (o: '( { } )', (\none -> clone Map!))
    (o: '( { OptTerminator MapItems OptTerminator } )', (\none -> clone Map: $4))
  ]

  Access = [
    (o: 'Identifier Accessor', (\none -> clone Access: $1, $2))
    (o: '@ Accessor', (\none -> clone Access: $1, $2))
    (o: 'Prototype Accessor', (\none -> clone Access: $1, $2))
    (o: 'Type Accessor', (\none -> clone Access: $1, $2))
    (o: 'Access Accessor', (\none -> clone Access: $1, $2))
  ]

  Accessor = [
    (o: '. IdentifierNoUtils', (\none -> $2))
    (o: '. AlphaNumeric', (\none -> $2))
  ]

  Arg = [
    (o: 'Value')
    (o: 'MathOperators')
    (o: 'Rest')
  ]

  Arguments = [
    (o: '()', (\none -> none))
    (o: 'Arg', (\none -> clone Arguments: $1))
    (o: 'Arguments Comma Arg', (\none -> clone Arguments: $1, $3))
  ]

  Param = [
    (o: 'IdentifierNoUtils')
    (o: 'IdentifierNoUtils = Value', (\none -> clone Assignment: $1, $3))
    (o: 'Rest')
    (o: 'Lists')
  ]

  Parameters = [
    (o: 'NONE', (\none -> none))
    (o: 'Param', (\none -> clone Arguments: $1))
    (o: 'Parameters , Param', (\none -> clone Arguments: $1, $3))
  ]

  Exceptions = [
    (o: 'TRY Body OptTerminator CATCH Body', (\none -> clone Exception: $2, $5))
    (o: 'RAISE Value ErrorType', (\none -> clone Exception: $1, $2, $3))
  ]

  ErrorType = [
    (o: '', (\none -> none))
    (o: 'Identifier')
  ]

  If = [
    (o: 'IF Values OptTerminator THEN Body OptTerminator ELSE Body', (\none -> clone If: $2, $5, $8))
  ]

  MathOperators = [
    (o: '+', (\none -> clone Identifier: '_add'))
    (o: '-', (\none -> clone Identifier: '_sub'))
    (o: '*', (\none -> clone Identifier: '_mul'))
    (o: '/', (\none -> clone Identifier: '_div'))
    (o: '( MathOperators NUM )', (\none -> clone Call: (clone Call: (clone Identifier: 'curryr'), (clone Arguments: $2)), (clone Arguments: $3)))
  ]

  Operation = [
    (o: 'Value COMPARE Value', (\none -> clone Compare: $1, $2, $3))
    (o: 'Value LOGIC Value', (\none -> clone Compare: $1, $2, $3))
    (o: 'Value LEFT_OPERATORS Value', (\none -> clone Operation: $1, $2, $3))
    (o: 'Value RIGHT_OPERATORS Value', (\none -> clone Operation: $1, $2, $3))
    (o: 'NOT Value', (\none -> clone Compare: $2, $1))
    (o: 'Value + Value', (\none -> clone Operation: $1, '+', $3))
    (o: 'Value - Value', (\none -> clone Operation: $1, '-', $3))
    (o: 'Value * Value', (\none -> clone Operation: $1, '*', $3))
    (o: 'Value / Value', (\none -> clone Operation: $1, '/', $3))
  ]
})


tokens = [
  'ASSERT', 'IF', 'THEN', 'ELSE',
  'LAMBDA',
  'IDENTIFIER', 'BOOL', 'NUM', 'STR',
  'LOGIC', 'COMPARE',
  'TERMINATOR'
]

operators = [
  ['right', 'NOT']
  ['right', 'IF', 'THEN', 'ELSE', 'IMPORT', 'EXPORT']
  ['right', '=', '|']
  ['right', 'RIGHT_OPERATORS']
  ['nonassoc', '(', ')', '[', ']', '{', '}', ':']
  ['left', 'LOGIC']
  ['left', 'COMPARE']
  ['left', 'LEFT_OPERATORS']
  ['left', '+', '-']
  ['left', '*', '/']
]

Parser = jison.Parser
grammar = ({
  tokens = tokens
  bnf = bnf
  operators = operators
  startSymbol = 'Root'
})

parser = clone Parser: grammar
lexer = ({
  lex = (\none {
    ref = this.tokens !! this.pos || ['']
    this.pos = this.pos + 1
    this.yytext = ref !! 1
    this.yylineno = ref !! 2
    ref !! 0
  })
  set-input = (\tokens {
    this.tokens = tokens
    this.pos = 0
  })
})
parser.lexer = lexer

export parser
